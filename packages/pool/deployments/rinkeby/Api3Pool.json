{
  "address": "0x79C0bC1D5b812Ddedc6fdb8DaC1943C5C1C312A9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "api3TokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "DepositedVesting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaidOutClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "name": "PaidReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "votingApp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "specsUrl",
          "type": "string"
        }
      ],
      "name": "PublishedSpecsUrl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheduledFor",
          "type": "uint256"
        }
      ],
      "name": "ScheduledUnstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAprUpdateCoefficient",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "aprUpdateCoefficient",
          "type": "uint256"
        }
      ],
      "name": "SetAprUpdateCoefficient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimsManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetClaimsManagerStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "agentAppPrimary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agentAppSecondary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "votingAppPrimary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "votingAppSecondary",
          "type": "address"
        }
      ],
      "name": "SetDaoApps",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxApr",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxApr",
          "type": "uint256"
        }
      ],
      "name": "SetMaxApr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinApr",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minApr",
          "type": "uint256"
        }
      ],
      "name": "SetMinApr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProposalVotingPowerThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalVotingPowerThreshold",
          "type": "uint256"
        }
      ],
      "name": "SetProposalVotingPowerThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTarget",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTarget",
          "type": "uint256"
        }
      ],
      "name": "SetStakeTarget",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldUnstakeWaitPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeWaitPeriod",
          "type": "uint256"
        }
      ],
      "name": "SetUnstakeWaitPeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "Undelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "votingApp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastVoteSnapshotBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastVoteSnapshotBlockUpdateTimestamp",
          "type": "uint256"
        }
      ],
      "name": "UpdatedLastVoteSnapshotBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "timelockManagerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdatedTimelock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EPOCH_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INTERACTION_FREQUENCY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_VESTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentAppPrimary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentAppSecondary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "api3Token",
      "outputs": [
        {
          "internalType": "contract IApi3Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aprUpdateCoefficient",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimsManagerStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "delegateVotingPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "depositAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "releaseStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseEnd",
          "type": "uint256"
        }
      ],
      "name": "depositWithVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochIndexOfLastRewardPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochIndexToReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "atBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSharesThen",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesisEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payOutClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalVotingPowerThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "votingApp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposalIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "specsUrl",
          "type": "string"
        }
      ],
      "name": "publishSpecsUrl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "scheduleUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aprUpdateCoefficient",
          "type": "uint256"
        }
      ],
      "name": "setAprUpdateCoefficient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimsManager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setClaimsManagerStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agentAppPrimary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_agentAppSecondary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingAppPrimary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingAppSecondary",
          "type": "address"
        }
      ],
      "name": "setDaoApps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxApr",
          "type": "uint256"
        }
      ],
      "name": "setMaxApr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minApr",
          "type": "uint256"
        }
      ],
      "name": "setMinApr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalVotingPowerThreshold",
          "type": "uint256"
        }
      ],
      "name": "setProposalVotingPowerThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeTarget",
          "type": "uint256"
        }
      ],
      "name": "setStakeTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unstakeWaitPeriod",
          "type": "uint256"
        }
      ],
      "name": "setUnstakeWaitPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyOneBlockAgo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "undelegateVotingPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "unstakeAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeWaitPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "snapshotBlock",
          "type": "uint256"
        }
      ],
      "name": "updateLastVoteSnapshotBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "timelockManagerAddress",
          "type": "address"
        }
      ],
      "name": "updateTimelockStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userAddressToVotingAppToProposalIndexToSpecsUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "userDelegate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "userDelegateAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "userReceivedDelegation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "userReceivedDelegationAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "userShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "userSharesAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "userSharesAtWithBinarySearch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "userStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userToDepositorToTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unstaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vesting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDelegationUpdateTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeScheduledFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingAppPrimary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingAppSecondary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x40243bd4f2279ad3e7d4da73b79cb4f855cda0026f981072a6a30a5a784d3ce8",
  "receipt": {
    "to": null,
    "from": "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40",
    "contractAddress": "0x79C0bC1D5b812Ddedc6fdb8DaC1943C5C1C312A9",
    "transactionIndex": 17,
    "gasUsed": "3342691",
    "logsBloom": "0x
    "blockHash": "0x05aaf658b9046dac854d805144e6a7c6a27423f71e4cd586fc124202e8640d83",
    "transactionHash": "0x40243bd4f2279ad3e7d4da73b79cb4f855cda0026f981072a6a30a5a784d3ce8",
    "logs": [],
    "blockNumber": 8376987,
    "cumulativeGasUsed": "4644906",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0E7FdA608937489f410377745dAE331d14965bB0"
  ],
  "solcInputHash": "ac725b25aabc5448501695a9fe4ae4d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3TokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"DepositedVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaidOutClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"PaidReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"votingApp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"specsUrl\",\"type\":\"string\"}],\"name\":\"PublishedSpecsUrl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduledFor\",\"type\":\"uint256\"}],\"name\":\"ScheduledUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAprUpdateCoefficient\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aprUpdateCoefficient\",\"type\":\"uint256\"}],\"name\":\"SetAprUpdateCoefficient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimsManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetClaimsManagerStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agentAppPrimary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agentAppSecondary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votingAppPrimary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votingAppSecondary\",\"type\":\"address\"}],\"name\":\"SetDaoApps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxApr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxApr\",\"type\":\"uint256\"}],\"name\":\"SetMaxApr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinApr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minApr\",\"type\":\"uint256\"}],\"name\":\"SetMinApr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalVotingPowerThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalVotingPowerThreshold\",\"type\":\"uint256\"}],\"name\":\"SetProposalVotingPowerThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTarget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTarget\",\"type\":\"uint256\"}],\"name\":\"SetStakeTarget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldUnstakeWaitPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeWaitPeriod\",\"type\":\"uint256\"}],\"name\":\"SetUnstakeWaitPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votingApp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastVoteSnapshotBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastVoteSnapshotBlockUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"UpdatedLastVoteSnapshotBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"timelockManagerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedTimelock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCH_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INTERACTION_FREQUENCY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_VESTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentAppPrimary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentAppSecondary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Token\",\"outputs\":[{\"internalType\":\"contract IApi3Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aprUpdateCoefficient\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimsManagerStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"delegateVotingPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"depositAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"name\":\"depositWithVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochIndexOfLastRewardPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochIndexToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSharesThen\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payOutClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalVotingPowerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"votingApp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"specsUrl\",\"type\":\"string\"}],\"name\":\"publishSpecsUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"scheduleUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aprUpdateCoefficient\",\"type\":\"uint256\"}],\"name\":\"setAprUpdateCoefficient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimsManager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setClaimsManagerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agentAppPrimary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_agentAppSecondary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingAppPrimary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingAppSecondary\",\"type\":\"address\"}],\"name\":\"setDaoApps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxApr\",\"type\":\"uint256\"}],\"name\":\"setMaxApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minApr\",\"type\":\"uint256\"}],\"name\":\"setMinApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalVotingPowerThreshold\",\"type\":\"uint256\"}],\"name\":\"setProposalVotingPowerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeTarget\",\"type\":\"uint256\"}],\"name\":\"setStakeTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeWaitPeriod\",\"type\":\"uint256\"}],\"name\":\"setUnstakeWaitPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyOneBlockAgo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegateVotingPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"unstakeAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeWaitPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"updateLastVoteSnapshotBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelockManagerAddress\",\"type\":\"address\"}],\"name\":\"updateTimelockStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddressToVotingAppToProposalIndexToSpecsUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"userDelegateAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userReceivedDelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"userReceivedDelegationAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"userSharesAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"userSharesAtWithBinarySearch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToDepositorToTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDelegationUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeScheduledFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingAppPrimary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingAppSecondary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Functionalities of the contract are distributed to files that form a chain of inheritance: (1) Api3Pool.sol (2) TimelockUtils.sol (3) ClaimUtils.sol (4) StakeUtils.sol (5) TransferUtils.sol (6) DelegationUtils.sol (7) RewardUtils.sol (8) GetterUtils.sol (9) StateUtils.sol\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"This method is used to implement the MiniMe interface for the Api3Voting app\",\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Current voting power of the user\"}},\"balanceOfAt(address,uint256)\":{\"details\":\"This method is used to implement the MiniMe interface for the Api3Voting app\",\"params\":{\"_block\":\"Block number for which the query is being made for\",\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Voting power of the user at the block\"}},\"constructor\":{\"params\":{\"api3TokenAddress\":\"API3 token contract address\"}},\"delegateVotingPower(address)\":{\"params\":{\"delegate\":\"User address the voting power will be delegated to\"}},\"deposit(address,uint256,address)\":{\"details\":\"This method is used by `TimelockManager.sol`\",\"params\":{\"amount\":\"Amount to be deposited\",\"source\":\"Token transfer source\",\"userAddress\":\"User that the tokens will be deposited for\"}},\"depositAndStake(address,uint256,address)\":{\"details\":\"Due to the `deposit()` interface, `userAddress` can only be the caller\",\"params\":{\"amount\":\"Amount to be deposited and staked\",\"source\":\"Token transfer source\",\"userAddress\":\"User that the tokens will be staked for\"}},\"depositWithVesting(address,uint256,address,uint256,uint256)\":{\"details\":\"Refer to `TimelockManager.sol` to see how this is used\",\"params\":{\"amount\":\"Token amount\",\"releaseEnd\":\"Vesting schedule ending time\",\"releaseStart\":\"Vesting schedule starting time\",\"source\":\"Token source\",\"userAddress\":\"Address of the user who will receive the tokens\"}},\"getUserLocked(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"locked\":\"Current locked tokens of the user\"}},\"payOutClaim(address,uint256)\":{\"details\":\"The claims manager is a trusted contract that is allowed to withdraw as many tokens as it wants from the pool to pay out insurance claims. Any kind of limiting logic (e.g., maximum amount of tokens that can be withdrawn) is implemented at its end and is out of the scope of this contract. This will revert if the pool does not have enough funds.\",\"params\":{\"amount\":\"Amount of tokens that will be paid out\",\"recipient\":\"Recipient of the claim\"}},\"payReward()\":{\"details\":\"Skips past epochs for which rewards have not been paid for. Skips the reward payment if the pool is not authorized to mint tokens. Neither of these conditions will occur in practice.\"},\"publishSpecsUrl(address,uint256,string)\":{\"details\":\"Since the owner of a proposal is known, users publishing specs for a proposal that is not their own is not a concern\",\"params\":{\"proposalIndex\":\"Proposal index\",\"specsUrl\":\"URL that hosts the specs of the transaction that will be made if the proposal passes\"}},\"scheduleUnstake(uint256)\":{\"details\":\"Users need to schedule an unstake and wait for `unstakeWaitPeriod` to be able to unstake.\",\"params\":{\"amount\":\"Amount of tokens for which the unstake will be scheduled for \"}},\"setAprUpdateCoefficient(uint256)\":{\"params\":{\"_aprUpdateCoefficient\":\"APR update coefficient\"}},\"setClaimsManagerStatus(address,bool)\":{\"details\":\"The claims manager is a trusted contract that is allowed to withdraw as many tokens as it wants from the pool to pay out insurance claims. Only the primary Agent can do this because it is a critical operation.\",\"params\":{\"claimsManager\":\"Claims manager contract address\",\"status\":\"Authorization status\"}},\"setDaoApps(address,address,address,address)\":{\"details\":\"This can also be called later on by the primary Agent to update all app addresses as a means of upgrade\",\"params\":{\"_agentAppPrimary\":\"Address of the primary Agent\",\"_agentAppSecondary\":\"Address of the secondary Agent\",\"_votingAppPrimary\":\"Address of the primary Api3Voting\",\"_votingAppSecondary\":\"Address of the secondary Api3Voting\"}},\"setMaxApr(uint256)\":{\"params\":{\"_maxApr\":\"Maximum APR\"}},\"setMinApr(uint256)\":{\"params\":{\"_minApr\":\"Minimum APR\"}},\"setProposalVotingPowerThreshold(uint256)\":{\"params\":{\"_proposalVotingPowerThreshold\":\"Voting power threshold for proposals\"}},\"setStakeTarget(uint256)\":{\"params\":{\"_stakeTarget\":\"Stake target\"}},\"setUnstakeWaitPeriod(uint256)\":{\"details\":\"This may want to be increased to provide more time for insurance claims to be resolved. Even when the insurance functionality is not implemented, the minimum valid value is `EPOCH_LENGTH` to prevent users from unstaking, withdrawing and staking with another address to work around the proposal spam protection. Only the primary Agent can do this because it is a critical operation.\",\"params\":{\"_unstakeWaitPeriod\":\"Unstake waiting period\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to stake\"}},\"totalSupply()\":{\"details\":\"This method is used to implement the MiniMe interface for the Aragon Voting app\",\"returns\":{\"_0\":\"Current total voting power\"}},\"totalSupplyOneBlockAgo()\":{\"details\":\"This method is used to implement the MiniMe interface for the Api3Voting app\",\"returns\":{\"_0\":\"Total voting power one block ago\"}},\"unstake()\":{\"returns\":{\"_0\":\"Amount of tokens that are unstaked\"}},\"unstakeAndWithdraw(address)\":{\"details\":\"Note that withdraw may revert because the user may have less than `unstaked` tokens that are withdrawable\",\"params\":{\"destination\":\"Token transfer destination\"}},\"updateLastVoteSnapshotBlock(uint256)\":{\"params\":{\"snapshotBlock\":\"Last vote snapshot block number\"}},\"updateTimelockStatus(address,address)\":{\"params\":{\"timelockManagerAddress\":\"Address of the TimelockManager that has created the timelock\",\"userAddress\":\"Address of the user whose timelock status will be updated\"}},\"userDelegate(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Current delegate of the user\"}},\"userDelegateAt(address,uint256)\":{\"details\":\"Starts from the most recent value in `user.delegates` and searches backwards one element at a time. If `_block` is within `EPOCH_LENGTH`, this call is guaranteed to find the value among the last 2 elements because a user cannot update delegate more frequently than once an `EPOCH_LENGTH`.\",\"params\":{\"_block\":\"Block number\",\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Delegate of the user at the specific block\"}},\"userReceivedDelegation(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Current voting power delegated to the user\"}},\"userReceivedDelegationAt(address,uint256)\":{\"details\":\"Starts from the most recent value in `user.delegatedTo` and searches backwards one element at a time. If `_block` is within `EPOCH_LENGTH`, this call is guaranteed to find the value among the last `MAX_INTERACTION_FREQUENCY` elements, which is why it only searches through them. \",\"params\":{\"_block\":\"Block number for which the query is being made for\",\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Voting power delegated to the user at the block\"}},\"userShares(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Current pool shares of the user\"}},\"userSharesAt(address,uint256)\":{\"details\":\"Starts from the most recent value in `user.shares` and searches backwards one element at a time\",\"params\":{\"_block\":\"Block number for which the query is being made for\",\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Pool shares of the user at the block\"}},\"userSharesAtWithBinarySearch(address,uint256)\":{\"details\":\"From  https://github.com/aragon/minime/blob/1d5251fc88eee5024ff318d95bc9f4c5de130430/contracts/MiniMeToken.sol#L431 This method is not used by the current iteration of the DAO/pool and is implemented for future external contracts to use to get the user shares at an arbitrary block.\",\"params\":{\"_block\":\"Block number for which the query is being made for\",\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Pool shares of the user at the block\"}},\"userStake(address)\":{\"params\":{\"userAddress\":\"User address\"},\"returns\":{\"_0\":\"Current staked tokens of the user\"}},\"withdraw(address,uint256)\":{\"details\":\"The user should call `getUserLocked()` beforehand to ensure that they have at least `amount` unlocked tokens to withdraw\",\"params\":{\"amount\":\"Amount to be withdrawn\",\"destination\":\"Token transfer destination\"}}},\"title\":\"API3 pool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"EPOCH_LENGTH()\":{\"notice\":\"Length of the epoch in which the staking reward is paid out once. It is hardcoded as 7 days in seconds.\"},\"MAX_INTERACTION_FREQUENCY()\":{\"notice\":\"Maximum number of additions interactions can make to a specific user's `delegatedTo` and `delegates` in an EPOCH_LENGTH before it starts to revert\"},\"REWARD_VESTING_PERIOD()\":{\"notice\":\"Number of epochs before the staking rewards get unlocked. Hardcoded as 52 epochs, which corresponds to a year.\"},\"agentAppPrimary()\":{\"notice\":\"Address of the primary Agent app of the API3 DAO\"},\"agentAppSecondary()\":{\"notice\":\"Address of the secondary Agent app of the API3 DAO\"},\"api3Token()\":{\"notice\":\"API3 token contract\"},\"aprUpdateCoefficient()\":{\"notice\":\"Coefficient that represents how aggresively the APR will be updated to meet the stake target.\"},\"balanceOf(address)\":{\"notice\":\"Called to get the current voting power of a user\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Called to get the voting power of a user at a specific block\"},\"claimsManagerStatus(address)\":{\"notice\":\"Mapping that keeps the claims manager statuses of addresses\"},\"currentApr()\":{\"notice\":\"APR that will be paid next epoch\"},\"delegateVotingPower(address)\":{\"notice\":\"Called by the user to delegate voting power\"},\"deposit(address,uint256,address)\":{\"notice\":\"Called to deposit tokens for a user by using `transferFrom()`\"},\"depositAndStake(address,uint256,address)\":{\"notice\":\"Convenience method to deposit and stake in a single transaction\"},\"depositWithVesting(address,uint256,address,uint256,uint256)\":{\"notice\":\"Called by TimelockManager contracts to deposit tokens on behalf of a user on a linear vesting schedule\"},\"epochIndexOfLastRewardPayment()\":{\"notice\":\"Epoch index of the most recent reward payment\"},\"epochIndexToReward(uint256)\":{\"notice\":\"Records of rewards paid in each epoch\"},\"genesisEpoch()\":{\"notice\":\"Epochs are indexed as `block.timestamp / EPOCH_LENGTH`. `genesisEpoch` is the index of the epoch in which the pool is deployed.\"},\"getUserLocked(address)\":{\"notice\":\"Called to get the current locked tokens of the user\"},\"maxApr()\":{\"notice\":\"Maximum APR (annual percentage rate) the pool will pay as staking rewards in percentages\"},\"minApr()\":{\"notice\":\"Minimum APR (annual percentage rate) the pool will pay as staking rewards in percentages\"},\"payOutClaim(address,uint256)\":{\"notice\":\"Called by a claims manager to pay out an insurance claim\"},\"payReward()\":{\"notice\":\"Called to pay the reward for the current epoch\"},\"proposalVotingPowerThreshold()\":{\"notice\":\"Minimum voting power the users must have to be able to make proposals (in percentages)\"},\"publishSpecsUrl(address,uint256,string)\":{\"notice\":\"Called by the owner of the proposal to publish the specs URL\"},\"scheduleUnstake(uint256)\":{\"notice\":\"Called to schedule an unstake by the user\"},\"setAprUpdateCoefficient(uint256)\":{\"notice\":\"Called by the DAO Agent to set the APR update coefficient\"},\"setClaimsManagerStatus(address,bool)\":{\"notice\":\"Called by the DAO Agent to set the authorization status of a claims manager contract\"},\"setDaoApps(address,address,address,address)\":{\"notice\":\"Called after deployment to set the addresses of the DAO apps\"},\"setMaxApr(uint256)\":{\"notice\":\"Called by the DAO Agent to set the maximum APR\"},\"setMinApr(uint256)\":{\"notice\":\"Called by the DAO Agent to set the minimum APR\"},\"setProposalVotingPowerThreshold(uint256)\":{\"notice\":\"Called by the DAO Agent to set the voting power threshold for proposals Only the primary Agent can do this because it is a critical operation.\"},\"setStakeTarget(uint256)\":{\"notice\":\"Called by the DAO Agent to set the stake target\"},\"setUnstakeWaitPeriod(uint256)\":{\"notice\":\"Called by the DAO Agent to set the unstake waiting period\"},\"stake(uint256)\":{\"notice\":\"Called to stake tokens to receive pools in the share\"},\"stakeTarget()\":{\"notice\":\"Stake target the pool will aim to meet in percentages of the total token supply. The staking rewards increase if the total staked  amount is below this, and vice versa.\"},\"totalStake()\":{\"notice\":\"Total number of tokens staked at the pool\"},\"totalSupply()\":{\"notice\":\"Called to get the current total voting power\"},\"totalSupplyOneBlockAgo()\":{\"notice\":\"Called to get the total voting power one block ago\"},\"undelegateVotingPower()\":{\"notice\":\"Called by the user to undelegate voting power\"},\"unstake()\":{\"notice\":\"Called to execute a pre-scheduled unstake\"},\"unstakeAndWithdraw(address)\":{\"notice\":\"Convenience method to execute an unstake and withdraw in a single transaction\"},\"unstakeWaitPeriod()\":{\"notice\":\"Users need to schedule an unstake and wait for `unstakeWaitPeriod` before being able to unstake. This is to prevent the stakers from frontrunning insurance claims by unstaking to evade them, or repeatedly unstake/stake to work around the proposal spam protection.\"},\"updateLastVoteSnapshotBlock(uint256)\":{\"notice\":\"Called by a DAO Api3Voting app to update the last vote snapshot block number\"},\"updateTimelockStatus(address,address)\":{\"notice\":\"Called to release tokens vested by the timelock\"},\"userAddressToVotingAppToProposalIndexToSpecsUrl(address,address,uint256)\":{\"notice\":\"Mapping that keeps the specs of a proposal provided by a user\"},\"userDelegate(address)\":{\"notice\":\"Called to get the current delegate of the user\"},\"userDelegateAt(address,uint256)\":{\"notice\":\"Called to get the delegate of the user at a specific block\"},\"userReceivedDelegation(address)\":{\"notice\":\"Called to get the current voting power delegated to a user\"},\"userReceivedDelegationAt(address,uint256)\":{\"notice\":\"Called to get the voting power delegated to a user at a specific block\"},\"userShares(address)\":{\"notice\":\"Called to get the current pool shares of a user\"},\"userSharesAt(address,uint256)\":{\"notice\":\"Called to get the pool shares of a user at a specific block\"},\"userSharesAtWithBinarySearch(address,uint256)\":{\"notice\":\"Called to get the pool shares of a user at a specific block using binary search\"},\"userStake(address)\":{\"notice\":\"Called to get the current staked tokens of the user\"},\"userToDepositorToTimelock(address,address)\":{\"notice\":\"Maps user addresses to TimelockManager contract addresses to  timelocks\"},\"users(address)\":{\"notice\":\"User records\"},\"votingAppPrimary()\":{\"notice\":\"Address of the primary Api3Voting app of the API3 DAO\"},\"votingAppSecondary()\":{\"notice\":\"Address of the secondary Api3Voting app of the API3 DAO\"},\"withdraw(address,uint256)\":{\"notice\":\"Called to withdraw tokens\"}},\"notice\":\"Users can stake API3 tokens at the pool contract to be granted shares. These shares are exposed to the Aragon-based DAO with a MiniMe token interface, giving the user voting power at the DAO. Staking pays out weekly rewards that get unlocked after a year, and staked funds are used to collateralize an insurance product that is outside the scope of this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Api3Pool.sol\":\"Api3Pool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Api3Pool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./TimelockUtils.sol\\\";\\nimport \\\"./interfaces/IApi3Pool.sol\\\";\\n\\n/// @title API3 pool contract\\n/// @notice Users can stake API3 tokens at the pool contract to be granted\\n/// shares. These shares are exposed to the Aragon-based DAO with a MiniMe\\n/// token interface, giving the user voting power at the DAO. Staking pays out\\n/// weekly rewards that get unlocked after a year, and staked funds are used to\\n/// collateralize an insurance product that is outside the scope of this\\n/// contract.\\n/// @dev Functionalities of the contract are distributed to files that form a\\n/// chain of inheritance:\\n/// (1) Api3Pool.sol\\n/// (2) TimelockUtils.sol\\n/// (3) ClaimUtils.sol\\n/// (4) StakeUtils.sol\\n/// (5) TransferUtils.sol\\n/// (6) DelegationUtils.sol\\n/// (7) RewardUtils.sol\\n/// (8) GetterUtils.sol\\n/// (9) StateUtils.sol\\ncontract Api3Pool is TimelockUtils, IApi3Pool {\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n        TimelockUtils(api3TokenAddress)\\n    {}\\n}\\n\",\"keccak256\":\"0xd5351d1e4a63f31d4bc11e005ccd9f65519f8f7cd6046b27fe47f6887101ef1a\",\"license\":\"MIT\"},\"contracts/ClaimUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StakeUtils.sol\\\";\\nimport \\\"./interfaces/IClaimUtils.sol\\\";\\n\\n/// @title Contract that implements the insurance claim payout functionality\\ncontract ClaimUtils is StakeUtils, IClaimUtils {\\n    /// @dev Reverts if the caller is not a claims manager\\n    modifier onlyClaimsManager() {\\n        require(claimsManagerStatus[msg.sender], ERROR_UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n        StakeUtils(api3TokenAddress)\\n    {}\\n\\n    /// @notice Called by a claims manager to pay out an insurance claim\\n    /// @dev The claims manager is a trusted contract that is allowed to\\n    /// withdraw as many tokens as it wants from the pool to pay out insurance\\n    /// claims. Any kind of limiting logic (e.g., maximum amount of tokens that\\n    /// can be withdrawn) is implemented at its end and is out of the scope of\\n    /// this contract.\\n    /// This will revert if the pool does not have enough funds.\\n    /// @param recipient Recipient of the claim\\n    /// @param amount Amount of tokens that will be paid out\\n    function payOutClaim(\\n        address recipient,\\n        uint256 amount\\n        )\\n        external\\n        override\\n        onlyClaimsManager()\\n    {\\n        payReward();\\n        // totalStake should not go lower than 1\\n        require(totalStake > amount, ERROR_VALUE);\\n        totalStake = totalStake - amount;\\n        api3Token.transfer(recipient, amount);\\n        emit PaidOutClaim(\\n            recipient,\\n            amount\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x4510374a218093b3e63fb528dbf4c710771f456eced3b185109951ef2c64e65a\",\"license\":\"MIT\"},\"contracts/DelegationUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./RewardUtils.sol\\\";\\nimport \\\"./interfaces/IDelegationUtils.sol\\\";\\n\\n/// @title Contract that implements voting power delegation\\ncontract DelegationUtils is RewardUtils, IDelegationUtils {\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n        RewardUtils(api3TokenAddress)\\n    {}\\n\\n    /// @notice Called by the user to delegate voting power\\n    /// @param delegate User address the voting power will be delegated to\\n    function delegateVotingPower(address delegate) \\n        external\\n        override\\n    {\\n        payReward();\\n        // Delegating users have cannot use their voting power, so we are\\n        // verifying that the delegate is not currently delegating. However,\\n        // the delegate may delegate after they have been delegated to.\\n        require(\\n            delegate != address(0)\\n                && delegate != msg.sender\\n                && userDelegate(delegate) == address(0),\\n            ERROR_ADDRESS\\n            );\\n        User storage user = users[msg.sender];\\n        // Do not allow frequent delegation updates as that can be used to spam\\n        // proposals\\n        require(\\n            user.lastDelegationUpdateTimestamp <= block.timestamp - EPOCH_LENGTH,\\n            ERROR_UNAUTHORIZED\\n            );\\n        user.lastDelegationUpdateTimestamp = block.timestamp;\\n        uint256 userShares = userShares(msg.sender);\\n        address userDelegate = userDelegate(msg.sender);\\n\\n        require(userDelegate != delegate, ERROR_DELEGATE);\\n\\n        if (userDelegate != address(0)) {\\n            // Need to revoke previous delegation\\n            updateCheckpointArray(\\n                users[userDelegate].delegatedTo,\\n                userReceivedDelegation(userDelegate) - userShares\\n                );\\n        }\\n        // Assign the new delegation\\n        User storage _delegate = users[delegate];\\n        updateCheckpointArray(\\n            _delegate.delegatedTo,\\n            userReceivedDelegation(delegate) + userShares\\n            );\\n        // Record the new delegate for the user\\n        updateAddressCheckpointArray(\\n            user.delegates,\\n            delegate\\n            );\\n        emit Delegated(\\n            msg.sender,\\n            delegate\\n            );\\n    }\\n\\n    /// @notice Called by the user to undelegate voting power\\n    function undelegateVotingPower()\\n        external\\n        override\\n    {\\n        payReward();\\n        User storage user = users[msg.sender];\\n        address userDelegate = userDelegate(msg.sender);\\n        require(\\n            userDelegate != address(0)\\n                && user.lastDelegationUpdateTimestamp <= block.timestamp - EPOCH_LENGTH,\\n            ERROR_UNAUTHORIZED\\n            );\\n\\n        uint256 userShares = userShares(msg.sender);\\n        User storage delegate = users[userDelegate];\\n        updateCheckpointArray(\\n            delegate.delegatedTo,\\n            userReceivedDelegation(userDelegate) - userShares\\n            );\\n        updateAddressCheckpointArray(\\n            user.delegates,\\n            address(0)\\n            );\\n        user.lastDelegationUpdateTimestamp = block.timestamp;\\n        emit Undelegated(\\n            msg.sender,\\n            userDelegate\\n            );\\n    }\\n\\n    /// @notice Called internally when the user shares are updated to update\\n    /// the delegated voting power\\n    /// @dev User shares only get updated while staking, scheduling unstake\\n    /// or unstaking\\n    /// @param shares Amount of shares that will be added/removed\\n    /// @param delta Whether the shares will be added/removed (add for `true`,\\n    /// and vice versa)\\n    function updateDelegatedVotingPower(\\n        uint256 shares,\\n        bool delta\\n        )\\n        internal\\n    {\\n        address userDelegate = userDelegate(msg.sender);\\n        if (userDelegate == address(0)) {\\n            return;\\n        }\\n\\n        User storage delegate = users[userDelegate];\\n        uint256 currentlyDelegatedTo = userReceivedDelegation(userDelegate);\\n        uint256 newDelegatedTo;\\n        if (delta) {\\n            newDelegatedTo = currentlyDelegatedTo + shares;\\n        } else {\\n            newDelegatedTo = currentlyDelegatedTo > shares \\n                ? currentlyDelegatedTo - shares\\n                : 0;\\n        }\\n        updateCheckpointArray(\\n            delegate.delegatedTo,\\n            newDelegatedTo\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x65abda1cc1d56c98ca98c01eb3915dd311fd3d4bbd51f74c96a7824fe96b1a50\",\"license\":\"MIT\"},\"contracts/GetterUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StateUtils.sol\\\";\\nimport \\\"./interfaces/IGetterUtils.sol\\\";\\n\\n/// @title Contract that implements getters\\ncontract GetterUtils is StateUtils, IGetterUtils {\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n        StateUtils(api3TokenAddress)\\n    {}\\n\\n    /// @notice Called to get the voting power of a user at a specific block\\n    /// @dev This method is used to implement the MiniMe interface for the\\n    /// Api3Voting app\\n    /// @param userAddress User address\\n    /// @param _block Block number for which the query is being made for\\n    /// @return Voting power of the user at the block\\n    function balanceOfAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        // Users that delegate have no voting power\\n        if (userDelegateAt(userAddress, _block) != address(0))\\n        {\\n            return 0;\\n        }\\n        uint256 userSharesThen = userSharesAt(userAddress, _block);\\n        uint256 delegatedToUserThen = userReceivedDelegationAt(userAddress, _block);\\n        return userSharesThen + delegatedToUserThen;\\n    }\\n\\n    /// @notice Called to get the current voting power of a user\\n    /// @dev This method is used to implement the MiniMe interface for the\\n    /// Api3Voting app\\n    /// @param userAddress User address\\n    /// @return Current voting power of the user\\n    function balanceOf(address userAddress)\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return balanceOfAt(userAddress, block.number);\\n    }\\n\\n    /// @notice Called to get the total voting power one block ago\\n    /// @dev This method is used to implement the MiniMe interface for the\\n    /// Api3Voting app\\n    /// @return Total voting power one block ago\\n    function totalSupplyOneBlockAgo()\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return totalSharesOneBlockAgo();\\n    }\\n\\n    /// @notice Called to get the current total voting power\\n    /// @dev This method is used to implement the MiniMe interface for the\\n    /// Aragon Voting app\\n    /// @return Current total voting power\\n    function totalSupply()\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return totalShares();\\n    }\\n\\n    /// @notice Called to get the pool shares of a user at a specific block\\n    /// @dev Starts from the most recent value in `user.shares` and searches\\n    /// backwards one element at a time\\n    /// @param userAddress User address\\n    /// @param _block Block number for which the query is being made for\\n    /// @return Pool shares of the user at the block\\n    function userSharesAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return getValueAt(users[userAddress].shares, _block, 0);\\n    }\\n\\n    /// @notice Called to get the current pool shares of a user\\n    /// @param userAddress User address\\n    /// @return Current pool shares of the user\\n    function userShares(address userAddress)\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return userSharesAt(userAddress, block.number);\\n    }\\n\\n    /// @notice Called to get the pool shares of a user at a specific block\\n    /// using binary search\\n    /// @dev From \\n    /// https://github.com/aragon/minime/blob/1d5251fc88eee5024ff318d95bc9f4c5de130430/contracts/MiniMeToken.sol#L431\\n    /// This method is not used by the current iteration of the DAO/pool and is\\n    /// implemented for future external contracts to use to get the user shares\\n    /// at an arbitrary block.\\n    /// @param userAddress User address\\n    /// @param _block Block number for which the query is being made for\\n    /// @return Pool shares of the user at the block\\n    function userSharesAtWithBinarySearch(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        Checkpoint[] storage checkpoints = users[userAddress].shares;\\n        if (checkpoints.length == 0)\\n            return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length -1].fromBlock)\\n            return checkpoints[checkpoints.length - 1].value;\\n        if (_block < checkpoints[0].fromBlock)\\n            return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length - 1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock <= _block) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @notice Called to get the current staked tokens of the user\\n    /// @param userAddress User address\\n    /// @return Current staked tokens of the user\\n    function userStake(address userAddress)\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return userShares(userAddress) * totalStake / totalShares();\\n    }\\n\\n    /// @notice Called to get the voting power delegated to a user at a\\n    /// specific block\\n    /// @dev Starts from the most recent value in `user.delegatedTo` and\\n    /// searches backwards one element at a time. If `_block` is within\\n    /// `EPOCH_LENGTH`, this call is guaranteed to find the value among\\n    /// the last `MAX_INTERACTION_FREQUENCY` elements, which is why it only\\n    /// searches through them. \\n    /// @param userAddress User address\\n    /// @param _block Block number for which the query is being made for\\n    /// @return Voting power delegated to the user at the block\\n    function userReceivedDelegationAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        Checkpoint[] storage delegatedTo = users[userAddress].delegatedTo;\\n        uint256 minimumCheckpointIndex = delegatedTo.length > MAX_INTERACTION_FREQUENCY\\n            ? delegatedTo.length - MAX_INTERACTION_FREQUENCY\\n            : 0;\\n        return getValueAt(delegatedTo, _block, minimumCheckpointIndex);\\n    }\\n\\n    /// @notice Called to get the current voting power delegated to a user\\n    /// @param userAddress User address\\n    /// @return Current voting power delegated to the user\\n    function userReceivedDelegation(address userAddress)\\n        public\\n        view\\n        override\\n        returns(uint256)\\n    {\\n        return userReceivedDelegationAt(userAddress, block.number);\\n    }\\n\\n    /// @notice Called to get the delegate of the user at a specific block\\n    /// @dev Starts from the most recent value in `user.delegates` and\\n    /// searches backwards one element at a time. If `_block` is within\\n    /// `EPOCH_LENGTH`, this call is guaranteed to find the value among\\n    /// the last 2 elements because a user cannot update delegate more\\n    /// frequently than once an `EPOCH_LENGTH`.\\n    /// @param userAddress User address\\n    /// @param _block Block number\\n    /// @return Delegate of the user at the specific block\\n    function userDelegateAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        public\\n        view\\n        override\\n        returns(address)\\n    {\\n        AddressCheckpoint[] storage delegates = users[userAddress].delegates;\\n        for (uint256 i = delegates.length; i > 0; i--)\\n        {\\n            if (delegates[i - 1].fromBlock <= _block)\\n            {\\n                return delegates[i - 1]._address;\\n            }\\n        }\\n        return address(0);\\n    }\\n\\n    /// @notice Called to get the current delegate of the user\\n    /// @param userAddress User address\\n    /// @return Current delegate of the user\\n    function userDelegate(address userAddress)\\n        public\\n        view\\n        override\\n        returns(address)\\n    {\\n        return userDelegateAt(userAddress, block.number);\\n    }\\n\\n    /// @notice Called to get the current locked tokens of the user\\n    /// @param userAddress User address\\n    /// @return locked Current locked tokens of the user\\n    function getUserLocked(address userAddress)\\n        public\\n        view\\n        override\\n        returns(uint256 locked)\\n    {\\n        Checkpoint[] storage _userShares = users[userAddress].shares;\\n        uint256 currentEpoch = block.timestamp / EPOCH_LENGTH;\\n        uint256 oldestLockedEpoch = currentEpoch - REWARD_VESTING_PERIOD > genesisEpoch\\n            ? currentEpoch - REWARD_VESTING_PERIOD + 1\\n            : genesisEpoch + 1;\\n\\n        if (_userShares.length == 0)\\n        {\\n            return 0;\\n        }\\n        uint256 indUserShares = _userShares.length - 1;\\n        for (\\n                uint256 indEpoch = currentEpoch;\\n                indEpoch >= oldestLockedEpoch;\\n                indEpoch--\\n            )\\n        {\\n            Reward storage lockedReward = epochIndexToReward[indEpoch];\\n            if (lockedReward.atBlock != 0)\\n            {\\n                for (; indUserShares >= 0; indUserShares--)\\n                {\\n                    Checkpoint storage userShare = _userShares[indUserShares];\\n                    if (userShare.fromBlock <= lockedReward.atBlock)\\n                    {\\n                        locked += lockedReward.amount * userShare.value / lockedReward.totalSharesThen;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Called to get the value of a checkpoint array at a specific\\n    /// block\\n    /// @param checkpoints Checkpoints array\\n    /// @param _block Block number for which the query is being made\\n    /// @return Value of the checkpoint array at the block\\n    function getValueAt(\\n        Checkpoint[] storage checkpoints,\\n        uint256 _block,\\n        uint256 minimumCheckpointIndex\\n        )\\n        internal\\n        view\\n        returns(uint256)\\n    {\\n        uint256 i = checkpoints.length;\\n        for (; i > minimumCheckpointIndex; i--)\\n        {\\n            if (checkpoints[i - 1].fromBlock <= _block)\\n            {\\n                return checkpoints[i - 1].value;\\n            }\\n        }\\n        // Revert if the value being searched for comes before\\n        // `minimumCheckpointIndex`\\n        require(i == 0, ERROR_VALUE);\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xebf202ed393053eab191c6d25aeea650fec46e8f459b659bc9501096e9b3fbc8\",\"license\":\"MIT\"},\"contracts/RewardUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./GetterUtils.sol\\\";\\nimport \\\"./interfaces/IRewardUtils.sol\\\";\\n\\n/// @title Contract that implements reward payments and locks\\ncontract RewardUtils is GetterUtils, IRewardUtils {\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n        GetterUtils(api3TokenAddress)\\n    {}\\n\\n    /// @notice Called to pay the reward for the current epoch\\n    /// @dev Skips past epochs for which rewards have not been paid for.\\n    /// Skips the reward payment if the pool is not authorized to mint tokens.\\n    /// Neither of these conditions will occur in practice.\\n    function payReward()\\n        public\\n        override\\n    {\\n        uint256 currentEpoch = block.timestamp / EPOCH_LENGTH;\\n        // This will be skipped in most cases because someone else will have\\n        // triggered the payment for this epoch\\n        if (epochIndexOfLastRewardPayment < currentEpoch)\\n        {\\n            if (api3Token.getMinterStatus(address(this)))\\n            {\\n                updateCurrentApr();\\n                uint256 rewardAmount = totalStake * currentApr / REWARD_VESTING_PERIOD / HUNDRED_PERCENT;\\n                epochIndexToReward[currentEpoch] = Reward({\\n                    atBlock: block.number,\\n                    amount: rewardAmount,\\n                    totalSharesThen: totalShares()\\n                    });\\n                api3Token.mint(address(this), rewardAmount);\\n                totalStake = totalStake + rewardAmount;\\n                emit PaidReward(\\n                    currentEpoch,\\n                    rewardAmount,\\n                    currentApr\\n                    );\\n            }\\n            epochIndexOfLastRewardPayment = currentEpoch;\\n        }\\n    }\\n\\n    /// @notice Updates the current APR\\n    /// @dev Called internally before paying out the reward\\n    function updateCurrentApr()\\n        internal\\n    {\\n        if (stakeTarget == 0) {\\n            currentApr = minApr;\\n            return;\\n        }\\n        uint256 totalStakePercentage = totalStake\\n             * HUNDRED_PERCENT\\n            / api3Token.totalSupply();\\n        // Calculate what % we are off from the target\\n        uint256 deltaAbsolute = totalStakePercentage < stakeTarget \\n            ? stakeTarget - totalStakePercentage\\n            : totalStakePercentage - stakeTarget;\\n        uint256 deltaPercentage = deltaAbsolute * HUNDRED_PERCENT / stakeTarget;\\n        // Use the update coefficient to calculate what % we need to update\\n        // the APR with\\n        uint256 aprUpdate = deltaPercentage * aprUpdateCoefficient / ONE_PERCENT;\\n\\n        uint256 newApr;\\n        if (totalStakePercentage < stakeTarget) {\\n            newApr = currentApr * (HUNDRED_PERCENT + aprUpdate) / HUNDRED_PERCENT;\\n        }\\n        else {\\n            newApr = HUNDRED_PERCENT > aprUpdate\\n                ? currentApr * (HUNDRED_PERCENT - aprUpdate) / HUNDRED_PERCENT\\n                : 0;\\n        }\\n\\n        if (newApr < minApr) {\\n            currentApr = minApr;\\n        }\\n        else if (newApr > maxApr) {\\n            currentApr = maxApr;\\n        }\\n        else {\\n            currentApr = newApr;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x514fceed3286cbc1eddd21b5769a6de9bc5ad08cec320c6a3580975d2412152f\",\"license\":\"MIT\"},\"contracts/StakeUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./TransferUtils.sol\\\";\\nimport \\\"./interfaces/IStakeUtils.sol\\\";\\n\\n/// @title Contract that implements staking functionality\\ncontract StakeUtils is TransferUtils, IStakeUtils {\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n        TransferUtils(api3TokenAddress)\\n    {}\\n\\n    /// @notice Called to stake tokens to receive pools in the share\\n    /// @param amount Amount of tokens to stake\\n    function stake(uint256 amount)\\n        public\\n        override\\n    {\\n        payReward();\\n        User storage user = users[msg.sender];\\n        require(user.unstaked >= amount, ERROR_VALUE);\\n        user.unstaked = user.unstaked - amount;\\n        uint256 totalSharesNow = totalShares();\\n        uint256 sharesToMint = totalSharesNow * amount / totalStake;\\n        uint256 userSharesNow = userShares(msg.sender);\\n        user.shares.push(Checkpoint({\\n            fromBlock: block.number,\\n            value: userSharesNow + sharesToMint\\n            }));\\n        uint256 totalSharesAfter = totalSharesNow + sharesToMint; \\n        updateTotalShares(totalSharesAfter);\\n        totalStake = totalStake + amount;\\n        updateDelegatedVotingPower(sharesToMint, true);\\n        emit Staked(\\n            msg.sender,\\n            amount,\\n            totalSharesAfter\\n            );\\n    }\\n\\n    /// @notice Convenience method to deposit and stake in a single transaction\\n    /// @dev Due to the `deposit()` interface, `userAddress` can only be the\\n    /// caller\\n    /// @param source Token transfer source\\n    /// @param amount Amount to be deposited and staked\\n    /// @param userAddress User that the tokens will be staked for\\n    function depositAndStake(\\n        address source,\\n        uint256 amount,\\n        address userAddress\\n        )\\n        external\\n        override\\n    {\\n        require(userAddress == msg.sender, ERROR_UNAUTHORIZED);\\n        deposit(source, amount, userAddress);\\n        stake(amount);\\n    }\\n\\n    /// @notice Called to schedule an unstake by the user\\n    /// @dev Users need to schedule an unstake and wait for `unstakeWaitPeriod`\\n    /// to be able to unstake.\\n    /// @param amount Amount of tokens for which the unstake will be scheduled\\n    /// for \\n    function scheduleUnstake(uint256 amount)\\n        external\\n        override\\n    {\\n        payReward();\\n        User storage user = users[msg.sender];\\n        uint256 userSharesNow = userShares(msg.sender);\\n        uint256 userStakedNow = userSharesNow * totalStake / totalShares();\\n        require(\\n            userStakedNow >= amount,\\n            ERROR_VALUE\\n            );\\n        user.unstakeScheduledFor = block.timestamp + unstakeWaitPeriod;\\n        user.unstakeAmount = amount;\\n        emit ScheduledUnstake(\\n            msg.sender,\\n            amount,\\n            user.unstakeScheduledFor\\n            );\\n    }\\n\\n    /// @notice Called to execute a pre-scheduled unstake\\n    /// @return Amount of tokens that are unstaked\\n    function unstake()\\n        public\\n        override\\n        returns(uint256)\\n    {\\n        payReward();\\n        User storage user = users[msg.sender];\\n        require(block.timestamp > user.unstakeScheduledFor, ERROR_UNAUTHORIZED);\\n        require(block.timestamp < user.unstakeScheduledFor + EPOCH_LENGTH, ERROR_UNAUTHORIZED);\\n        uint256 amount = user.unstakeAmount;\\n        uint256 totalSharesNow = totalShares();\\n        uint256 userSharesNow = userShares(msg.sender);\\n        uint256 sharesToBurn = totalSharesNow * amount / totalStake;\\n        // If the user no longer has enough shares to unstake the scheduled\\n        // amount of tokens, unstake as many tokens as possible instead\\n        if (sharesToBurn > userSharesNow)\\n        {\\n            sharesToBurn = userSharesNow;\\n            amount = sharesToBurn * totalStake / totalSharesNow;\\n        }\\n        user.unstaked = user.unstaked + amount;\\n        user.shares.push(Checkpoint({\\n            fromBlock: block.number,\\n            value: userSharesNow - sharesToBurn\\n            }));\\n        uint256 totalSharesAfter = totalSharesNow > sharesToBurn\\n                ? totalSharesNow - sharesToBurn\\n                : 1;\\n        updateTotalShares(totalSharesAfter);\\n        updateDelegatedVotingPower(sharesToBurn, false);\\n\\n        totalStake = totalStake > amount\\n            ? totalStake - amount\\n            : 1;\\n        user.unstakeScheduledFor = 0;\\n        user.unstakeAmount = 0;\\n        emit Unstaked(\\n            msg.sender,\\n            amount,\\n            totalSharesAfter\\n            );\\n        return amount;\\n    }\\n\\n    /// @notice Convenience method to execute an unstake and withdraw in a\\n    /// single transaction\\n    /// @dev Note that withdraw may revert because the user may have less than\\n    /// `unstaked` tokens that are withdrawable\\n    /// @param destination Token transfer destination\\n    function unstakeAndWithdraw(address destination)\\n        external\\n        override\\n    {\\n        uint256 unstaked = unstake();\\n        withdraw(destination, unstaked);\\n    }\\n}\\n\",\"keccak256\":\"0x4f7c316e55b4797c7fb79afdcb9739b818d46389595edafe568dd91593a48eda\",\"license\":\"MIT\"},\"contracts/StateUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./auxiliary/interfaces/v0.8.2/IApi3Token.sol\\\";\\nimport \\\"./interfaces/IStateUtils.sol\\\";\\n\\n/// @title Contract that keeps state variables\\ncontract StateUtils is IStateUtils {\\n    struct Checkpoint {\\n        uint256 fromBlock;\\n        uint256 value;\\n    }\\n\\n    struct AddressCheckpoint {\\n        uint256 fromBlock;\\n        address _address;\\n    }\\n\\n    struct Reward {\\n        uint256 atBlock;\\n        uint256 amount;\\n        uint256 totalSharesThen;\\n    }\\n\\n    struct User {\\n        uint256 unstaked;\\n        uint256 vesting;\\n        Checkpoint[] shares;\\n        AddressCheckpoint[] delegates;\\n        Checkpoint[] delegatedTo;\\n        uint256 lastDelegationUpdateTimestamp;\\n        uint256 unstakeScheduledFor;\\n        uint256 unstakeAmount;\\n    }\\n\\n    /// @notice Length of the epoch in which the staking reward is paid out\\n    /// once. It is hardcoded as 7 days in seconds.\\n    /// @dev In addition to regulating reward payments, this variable is used\\n    /// for four additional things:\\n    /// (1) Once an unstaking scheduling matures, the user has `EPOCH_LENGTH`\\n    /// to execute the unstaking before it expires\\n    /// (2) After a user makes a proposal, they cannot make a second one\\n    /// before `EPOCH_LENGTH` has passed\\n    /// (3) After a user updates their delegation status, they have to wait\\n    /// `EPOCH_LENGTH` before updating it again\\n    /// (4) A user's `delegatedTo` or `delegates` checkpoint arrays can be\\n    /// extended up to `MAX_INTERACTION_FREQUENCY` in an `EPOCH_LENGTH`\\n    uint256 public constant EPOCH_LENGTH = 7 * 24 * 60 * 60;\\n\\n    /// @notice Number of epochs before the staking rewards get unlocked.\\n    /// Hardcoded as 52 epochs, which corresponds to a year.\\n    uint256 public constant REWARD_VESTING_PERIOD = 52;\\n\\n    /// @notice Maximum number of additions interactions can make to a specific\\n    /// user's `delegatedTo` and `delegates` in an EPOCH_LENGTH before it\\n    /// starts to revert\\n    /// @dev Note that interactions overwrite checkpoints rather than adding a\\n    /// new element to the arrays unless a new proposal is made between them.\\n    /// This means that at least `MAX_INTERACTION_FREQUENCY` proposals need\\n    /// to be made for this mechanism to prevent further interactions, which is\\n    /// not likely to happen in practice due to the proposal spam protection\\n    /// mechanisms.\\n    uint256 public constant MAX_INTERACTION_FREQUENCY = 20;\\n\\n    string internal constant ERROR_VALUE = \\\"Invalid value\\\";\\n    string internal constant ERROR_ADDRESS = \\\"Invalid address\\\";\\n    string internal constant ERROR_UNAUTHORIZED = \\\"Unauthorized\\\";\\n    string internal constant ERROR_FREQUENCY = \\\"Try again a week later\\\";\\n    string internal constant ERROR_DELEGATE = \\\"Cannot delegate to the same address\\\";\\n\\n    // All percentage values are represented by multiplying by 1e6\\n    uint256 internal constant ONE_PERCENT = 1_000_000;\\n    uint256 internal constant HUNDRED_PERCENT = 100_000_000;\\n    \\n    /// @notice API3 token contract\\n    IApi3Token public api3Token;\\n\\n    /// @notice Address of the primary Agent app of the API3 DAO\\n    /// @dev Primary Agent can be operated through the primary Api3Voting app.\\n    /// The primary Api3Voting app requires a higher quorum, and the primary\\n    /// Agent is more privileged.\\n    address public agentAppPrimary;\\n\\n    /// @notice Address of the secondary Agent app of the API3 DAO\\n    /// @dev Secondary Agent can be operated through the secondary Api3Voting\\n    /// app. The secondary Api3Voting app requires a lower quorum, and the primary\\n    /// Agent is less privileged.\\n    address public agentAppSecondary;\\n\\n    /// @notice Address of the primary Api3Voting app of the API3 DAO\\n    /// @dev Used to operate the primary Agent\\n    address public votingAppPrimary;\\n\\n    /// @notice Address of the secondary Api3Voting app of the API3 DAO\\n    /// @dev Used to operate the secondary Agent\\n    address public votingAppSecondary;\\n\\n    /// @notice Mapping that keeps the claims manager statuses of addresses\\n    /// @dev A claims manager is a contract that is authorized to pay out\\n    /// claims from the staking pool, effectively slashing the stakers. The\\n    /// statuses are kept as a mapping to support multiple claims managers.\\n    mapping(address => bool) public claimsManagerStatus;\\n\\n    /// @notice Epochs are indexed as `block.timestamp / EPOCH_LENGTH`.\\n    /// `genesisEpoch` is the index of the epoch in which the pool is deployed.\\n    uint256 public immutable genesisEpoch;\\n\\n    /// @notice Records of rewards paid in each epoch\\n    /// @dev `.atBlock` of a past epoch's reward record being `0` means no\\n    /// reward was paid for that block\\n    mapping(uint256 => Reward) public epochIndexToReward;\\n\\n    /// @notice Epoch index of the most recent reward payment\\n    uint256 public epochIndexOfLastRewardPayment;\\n\\n    /// @notice User records\\n    mapping(address => User) public users;\\n\\n    /// @notice Total number of tokens staked at the pool\\n    uint256 public totalStake;\\n\\n    /// @notice Stake target the pool will aim to meet in percentages of the\\n    /// total token supply. The staking rewards increase if the total staked\\n    ///  amount is below this, and vice versa.\\n    /// @dev Default value is 50% of the total API3 token supply. This\\n    /// parameter is governable by the DAO.\\n    uint256 public stakeTarget = 50_000_000;\\n\\n    /// @notice Minimum APR (annual percentage rate) the pool will pay as\\n    /// staking rewards in percentages\\n    /// @dev Default value is 2.5%. This parameter is governable by the DAO.\\n    uint256 public minApr = 2_500_000;\\n\\n    /// @notice Maximum APR (annual percentage rate) the pool will pay as\\n    /// staking rewards in percentages\\n    /// @dev Default value is 75%. This parameter is governable by the DAO.\\n    uint256 public maxApr = 75_000_000;\\n\\n    /// @notice Coefficient that represents how aggresively the APR will be\\n    /// updated to meet the stake target.\\n    /// @dev Since this is a coefficient, it has no unit. A coefficient of 1e6\\n    /// means 1% deviation from the stake target results in 1% update in APR.\\n    /// This parameter is governable by the DAO.\\n    uint256 public aprUpdateCoefficient = 1_000_000;\\n\\n    /// @notice Users need to schedule an unstake and wait for\\n    /// `unstakeWaitPeriod` before being able to unstake. This is to prevent\\n    /// the stakers from frontrunning insurance claims by unstaking to evade\\n    /// them, or repeatedly unstake/stake to work around the proposal spam\\n    /// protection.\\n    /// @dev This parameter is governable by the DAO, and the DAO is expected\\n    /// to set this to a value that is large enough to allow insurance claims\\n    /// to be resolved.\\n    uint256 public unstakeWaitPeriod = EPOCH_LENGTH;\\n\\n    /// @notice Minimum voting power the users must have to be able to make\\n    /// proposals (in percentages)\\n    /// @dev Delegations count towards voting power.\\n    /// Default value is 0.1%. This parameter is governable by the DAO.\\n    uint256 public proposalVotingPowerThreshold = 100_000;\\n\\n    /// @notice APR that will be paid next epoch\\n    /// @dev This is initialized at maximum APR, but will reach an\\n    /// equilibrium based on the stake target.\\n    /// Every epoch (week), APR/52 of the total staked tokens will be added to\\n    /// the pool, effectively distributing them to the stakers.\\n    uint256 public currentApr = maxApr;\\n\\n    /// @notice Mapping that keeps the specs of a proposal provided by a user\\n    /// @dev After making a proposal through the Agent app, the user publishes\\n    /// the specs of the proposal (target contract address, function,\\n    /// parameters) at a URL\\n    mapping(address => mapping(address => mapping(uint256 => string))) public userAddressToVotingAppToProposalIndexToSpecsUrl;\\n\\n    // Snapshot block number of the last vote created at one of the DAO\\n    // Api3Voting apps\\n    uint256 private lastVoteSnapshotBlock;\\n    mapping(uint256 => uint256) private snapshotBlockToTimestamp;\\n\\n    // We keep checkpoints for two most recent blocks at which totalShares has\\n    // been updated. Note that the indices do not indicate chronological\\n    // ordering.\\n    Checkpoint private totalSharesCheckpoint1;\\n    Checkpoint private totalSharesCheckpoint2;\\n\\n    /// @dev Reverts if the caller is not an API3 DAO Agent\\n    modifier onlyAgentApp() {\\n        require(\\n            msg.sender == agentAppPrimary || msg.sender == agentAppSecondary,\\n            ERROR_UNAUTHORIZED\\n            );\\n        _;\\n    }\\n\\n    /// @dev Reverts if the caller is not the primary API3 DAO Agent\\n    modifier onlyAgentAppPrimary() {\\n        require(msg.sender == agentAppPrimary, ERROR_UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n    {\\n        api3Token = IApi3Token(api3TokenAddress);\\n        // Initialize the share price at 1\\n        updateTotalShares(1);\\n        totalStake = 1;\\n        // Set the current epoch as the genesis epoch and skip its reward\\n        // payment\\n        uint256 currentEpoch = block.timestamp / EPOCH_LENGTH;\\n        genesisEpoch = currentEpoch;\\n        epochIndexOfLastRewardPayment = currentEpoch;\\n    }\\n\\n    /// @notice Called after deployment to set the addresses of the DAO apps\\n    /// @dev This can also be called later on by the primary Agent to update\\n    /// all app addresses as a means of upgrade\\n    /// @param _agentAppPrimary Address of the primary Agent\\n    /// @param _agentAppSecondary Address of the secondary Agent\\n    /// @param _votingAppPrimary Address of the primary Api3Voting\\n    /// @param _votingAppSecondary Address of the secondary Api3Voting\\n    function setDaoApps(\\n        address _agentAppPrimary,\\n        address _agentAppSecondary,\\n        address _votingAppPrimary,\\n        address _votingAppSecondary\\n        )\\n        external\\n        override\\n    {\\n        require(\\n            agentAppPrimary == address(0) || msg.sender == agentAppPrimary,\\n            ERROR_UNAUTHORIZED\\n            );\\n        require(\\n            _agentAppPrimary != address(0)\\n                && _agentAppSecondary  != address(0)\\n                && _votingAppPrimary  != address(0)\\n                && _votingAppSecondary  != address(0),\\n            ERROR_ADDRESS\\n            );\\n        agentAppPrimary = _agentAppPrimary;\\n        agentAppSecondary = _agentAppSecondary;\\n        votingAppPrimary = _votingAppPrimary;\\n        votingAppSecondary = _votingAppSecondary;\\n        emit SetDaoApps(\\n            agentAppPrimary,\\n            agentAppSecondary,\\n            votingAppPrimary,\\n            votingAppSecondary\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the authorization status of a\\n    /// claims manager contract\\n    /// @dev The claims manager is a trusted contract that is allowed to\\n    /// withdraw as many tokens as it wants from the pool to pay out insurance\\n    /// claims.\\n    /// Only the primary Agent can do this because it is a critical operation.\\n    /// @param claimsManager Claims manager contract address\\n    /// @param status Authorization status\\n    function setClaimsManagerStatus(\\n        address claimsManager,\\n        bool status\\n        )\\n        external\\n        override\\n        onlyAgentAppPrimary()\\n    {\\n        claimsManagerStatus[claimsManager] = status;\\n        emit SetClaimsManagerStatus(\\n            claimsManager,\\n            status\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the stake target\\n    /// @param _stakeTarget Stake target\\n    function setStakeTarget(uint256 _stakeTarget)\\n        external\\n        override\\n        onlyAgentApp()\\n    {\\n        require(\\n            _stakeTarget <= HUNDRED_PERCENT\\n                && _stakeTarget >= 0,\\n            ERROR_VALUE);\\n        uint256 oldStakeTarget = stakeTarget;\\n        stakeTarget = _stakeTarget;\\n        emit SetStakeTarget(\\n            oldStakeTarget,\\n            stakeTarget\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the maximum APR\\n    /// @param _maxApr Maximum APR\\n    function setMaxApr(uint256 _maxApr)\\n        external\\n        override\\n        onlyAgentApp()\\n    {\\n        require(_maxApr >= minApr, ERROR_VALUE);\\n        uint256 oldMaxApr = maxApr;\\n        maxApr = _maxApr;\\n        emit SetMaxApr(\\n            oldMaxApr,\\n            maxApr\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the minimum APR\\n    /// @param _minApr Minimum APR\\n    function setMinApr(uint256 _minApr)\\n        external\\n        override\\n        onlyAgentApp()\\n    {\\n        require(_minApr <= maxApr, ERROR_VALUE);\\n        uint256 oldMinApr = minApr;\\n        minApr = _minApr;\\n        emit SetMinApr(\\n            oldMinApr,\\n            minApr\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the unstake waiting period\\n    /// @dev This may want to be increased to provide more time for insurance\\n    /// claims to be resolved.\\n    /// Even when the insurance functionality is not implemented, the minimum\\n    /// valid value is `EPOCH_LENGTH` to prevent users from unstaking,\\n    /// withdrawing and staking with another address to work around the\\n    /// proposal spam protection.\\n    /// Only the primary Agent can do this because it is a critical operation.\\n    /// @param _unstakeWaitPeriod Unstake waiting period\\n    function setUnstakeWaitPeriod(uint256 _unstakeWaitPeriod)\\n        external\\n        override\\n        onlyAgentAppPrimary()\\n    {\\n        require(_unstakeWaitPeriod >= EPOCH_LENGTH, ERROR_VALUE);\\n        uint256 oldUnstakeWaitPeriod = unstakeWaitPeriod;\\n        unstakeWaitPeriod = _unstakeWaitPeriod;\\n        emit SetUnstakeWaitPeriod(\\n            oldUnstakeWaitPeriod,\\n            unstakeWaitPeriod\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the APR update coefficient\\n    /// @param _aprUpdateCoefficient APR update coefficient\\n    function setAprUpdateCoefficient(uint256 _aprUpdateCoefficient)\\n        external\\n        override\\n        onlyAgentApp()\\n    {\\n        require(\\n            _aprUpdateCoefficient <= 1_000_000_000\\n                && _aprUpdateCoefficient > 0,\\n            ERROR_VALUE\\n            );\\n        uint256 oldAprUpdateCoefficient = aprUpdateCoefficient;\\n        aprUpdateCoefficient = _aprUpdateCoefficient;\\n        emit SetAprUpdateCoefficient(\\n            oldAprUpdateCoefficient,\\n            aprUpdateCoefficient\\n            );\\n    }\\n\\n    /// @notice Called by the DAO Agent to set the voting power threshold for\\n    /// proposals\\n    /// Only the primary Agent can do this because it is a critical operation.\\n    /// @param _proposalVotingPowerThreshold Voting power threshold for\\n    /// proposals\\n    function setProposalVotingPowerThreshold(uint256 _proposalVotingPowerThreshold)\\n        external\\n        override\\n        onlyAgentAppPrimary()\\n    {\\n        require(\\n            _proposalVotingPowerThreshold <= 10 * ONE_PERCENT,\\n            ERROR_VALUE);\\n        uint256 oldProposalVotingPowerThreshold = proposalVotingPowerThreshold;\\n        proposalVotingPowerThreshold = _proposalVotingPowerThreshold;\\n        emit SetProposalVotingPowerThreshold(\\n            oldProposalVotingPowerThreshold,\\n            proposalVotingPowerThreshold\\n            );\\n    }\\n\\n    /// @notice Called by the owner of the proposal to publish the specs URL\\n    /// @dev Since the owner of a proposal is known, users publishing specs for\\n    /// a proposal that is not their own is not a concern\\n    /// @param proposalIndex Proposal index\\n    /// @param specsUrl URL that hosts the specs of the transaction that will\\n    /// be made if the proposal passes\\n    function publishSpecsUrl(\\n        address votingApp,\\n        uint256 proposalIndex,\\n        string calldata specsUrl\\n        )\\n        external\\n        override\\n    {\\n        userAddressToVotingAppToProposalIndexToSpecsUrl[msg.sender][votingApp][proposalIndex] = specsUrl;\\n        emit PublishedSpecsUrl(\\n            votingApp,\\n            proposalIndex,\\n            msg.sender,\\n            specsUrl\\n            );\\n    }\\n\\n    /// @notice Called by a DAO Api3Voting app to update the last vote snapshot\\n    /// block number\\n    /// @param snapshotBlock Last vote snapshot block number\\n    function updateLastVoteSnapshotBlock(uint256 snapshotBlock)\\n        external\\n        override\\n    {\\n        require(\\n            msg.sender == votingAppPrimary || msg.sender == votingAppSecondary,\\n            ERROR_UNAUTHORIZED\\n            );\\n        lastVoteSnapshotBlock = snapshotBlock;\\n        snapshotBlockToTimestamp[snapshotBlock] = block.timestamp;\\n        emit UpdatedLastVoteSnapshotBlock(\\n            msg.sender,\\n            snapshotBlock,\\n            block.timestamp\\n            );\\n    }\\n\\n    /// @notice Called internally to update the total shares history\\n    /// @dev `fromBlock0` and `fromBlock1` will be two different block numbers\\n    /// when totalShares history was last updated. If one of these\\n    /// `fromBlock`s match with `block.number`, we simply update the value\\n    /// (because the history keeps the most recent value from that block). If\\n    /// not, we can overwrite the older one, as we no longer need it.\\n    /// @param newTotalShares Total shares value to insert into history\\n    function updateTotalShares(uint256 newTotalShares)\\n        internal\\n    {\\n        if (block.number == totalSharesCheckpoint1.fromBlock)\\n        {\\n            totalSharesCheckpoint1.value = newTotalShares;\\n        }\\n        else if (block.number == totalSharesCheckpoint2.fromBlock)\\n        {\\n            totalSharesCheckpoint2.value = newTotalShares;\\n        }\\n        else {\\n            if (totalSharesCheckpoint1.fromBlock < totalSharesCheckpoint2.fromBlock)\\n            {\\n                totalSharesCheckpoint1.fromBlock = block.number;\\n                totalSharesCheckpoint1.value = newTotalShares;\\n            }\\n            else\\n            {\\n                totalSharesCheckpoint2.fromBlock = block.number;\\n                totalSharesCheckpoint2.value = newTotalShares;\\n            }\\n        }\\n    }\\n\\n    /// @notice Called internally to get the current total shares\\n    /// @return Current total shares\\n    function totalShares()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (totalSharesCheckpoint1.fromBlock < totalSharesCheckpoint2.fromBlock)\\n        {\\n            return totalSharesCheckpoint2.value;\\n        }\\n        else\\n        {\\n            return totalSharesCheckpoint1.value;\\n        }\\n    }\\n\\n    /// @notice Called internally to get the total shares one block ago\\n    /// @return Total shares one block ago\\n    function totalSharesOneBlockAgo()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (totalSharesCheckpoint2.fromBlock == block.number)\\n        {\\n            return totalSharesCheckpoint1.value;\\n        }\\n        else if (totalSharesCheckpoint1.fromBlock == block.number)\\n        {\\n            return totalSharesCheckpoint2.value;\\n        }\\n        else\\n        {\\n            return totalShares();\\n        }\\n    }\\n\\n    /// @notice Called internally to update a checkpoint array\\n    /// @param checkpointArray Checkpoint array to be updated\\n    /// @param value Value to be updated with\\n    function updateCheckpointArray(\\n        Checkpoint[] storage checkpointArray,\\n        uint256 value\\n        )\\n        internal\\n    {\\n        if (checkpointArray.length == 0)\\n        {\\n            checkpointArray.push(Checkpoint({\\n                fromBlock: lastVoteSnapshotBlock,\\n                value: value\\n                }));\\n        }\\n        else\\n        {\\n            if (checkpointArray.length + 1 >= MAX_INTERACTION_FREQUENCY)\\n            {\\n                uint256 interactionTimestampMaxInteractionFrequencyAgo = snapshotBlockToTimestamp[checkpointArray[checkpointArray.length + 1 - MAX_INTERACTION_FREQUENCY].fromBlock];\\n                require(\\n                    block.timestamp - interactionTimestampMaxInteractionFrequencyAgo > EPOCH_LENGTH,\\n                    ERROR_FREQUENCY\\n                    );\\n            }\\n            Checkpoint storage lastElement = checkpointArray[checkpointArray.length - 1];\\n            if (lastElement.fromBlock < lastVoteSnapshotBlock)\\n            {\\n                checkpointArray.push(Checkpoint({\\n                    fromBlock: lastVoteSnapshotBlock,\\n                    value: value\\n                    }));\\n            }\\n            else\\n            {\\n                lastElement.value = value;\\n            }\\n        }\\n    }\\n\\n    /// @notice Called internally to update an address checkpoint array\\n    /// @param addressCheckpointArray Address checkpoint array to be updated\\n    /// @param _address Address to be updated with\\n    function updateAddressCheckpointArray(\\n        AddressCheckpoint[] storage addressCheckpointArray,\\n        address _address\\n        )\\n        internal\\n    {\\n        if (addressCheckpointArray.length == 0)\\n        {\\n            addressCheckpointArray.push(AddressCheckpoint({\\n                fromBlock: lastVoteSnapshotBlock,\\n                _address: _address\\n                }));\\n        }\\n        else\\n        {\\n            AddressCheckpoint storage lastElement = addressCheckpointArray[addressCheckpointArray.length - 1];\\n            if (lastElement.fromBlock < lastVoteSnapshotBlock)\\n            {\\n                addressCheckpointArray.push(AddressCheckpoint({\\n                    fromBlock: lastVoteSnapshotBlock,\\n                    _address: _address\\n                    }));\\n            }\\n            else\\n            {\\n                lastElement._address = _address;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x278204ab3250890a45caf1715ab42f0b9ac888dd741693abf2eabf0e0bde23d6\",\"license\":\"MIT\"},\"contracts/TimelockUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./ClaimUtils.sol\\\";\\nimport \\\"./interfaces/ITimelockUtils.sol\\\";\\n\\n/// @title Contract that implements vesting functionality\\n/// @dev TimelockManager contracts interface with this contract to transfer\\n/// API3 tokens that are locked under a vesting schedule.\\ncontract TimelockUtils is ClaimUtils, ITimelockUtils {\\n    struct Timelock\\n    {\\n        uint256 totalAmount;\\n        uint256 remainingAmount;\\n        uint256 releaseStart;\\n        uint256 releaseEnd;\\n    }\\n\\n    /// @notice Maps user addresses to TimelockManager contract addresses to \\n    /// timelocks\\n    /// @dev This implies that a user cannot have multiple timelocks\\n    /// transferrerd from the same TimelockManager contract. This is\\n    /// acceptable, because the TimelockManager is implemented in a way to not\\n    /// allow multiple timelocks per user.\\n    mapping(address => mapping(address => Timelock)) public userToDepositorToTimelock;\\n\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n        ClaimUtils(api3TokenAddress)\\n    {}\\n\\n    /// @notice Called by TimelockManager contracts to deposit tokens on behalf\\n    /// of a user on a linear vesting schedule\\n    /// @dev Refer to `TimelockManager.sol` to see how this is used\\n    /// @param source Token source\\n    /// @param amount Token amount\\n    /// @param userAddress Address of the user who will receive the tokens\\n    /// @param releaseStart Vesting schedule starting time\\n    /// @param releaseEnd Vesting schedule ending time\\n    function depositWithVesting(\\n        address source,\\n        uint256 amount,\\n        address userAddress,\\n        uint256 releaseStart,\\n        uint256 releaseEnd\\n        )\\n        external\\n        override\\n    {\\n        require(userToDepositorToTimelock[userAddress][msg.sender].remainingAmount == 0, ERROR_UNAUTHORIZED);\\n        require(\\n            releaseEnd > releaseStart\\n                && amount != 0,\\n            ERROR_VALUE\\n            );\\n        users[userAddress].unstaked = users[userAddress].unstaked + amount;\\n        users[userAddress].vesting = users[userAddress].vesting + amount;\\n        userToDepositorToTimelock[userAddress][msg.sender] = Timelock({\\n            totalAmount: amount,\\n            remainingAmount: amount,\\n            releaseStart: releaseStart,\\n            releaseEnd: releaseEnd\\n            });\\n        api3Token.transferFrom(source, address(this), amount);\\n        emit DepositedVesting(\\n            userAddress,\\n            amount,\\n            releaseStart,\\n            releaseEnd\\n            );\\n    }\\n\\n    /// @notice Called to release tokens vested by the timelock\\n    /// @param userAddress Address of the user whose timelock status will be\\n    /// updated\\n    /// @param timelockManagerAddress Address of the TimelockManager that has\\n    /// created the timelock\\n    function updateTimelockStatus(\\n        address userAddress,\\n        address timelockManagerAddress\\n        )\\n        external\\n        override\\n    {\\n        Timelock storage timelock = userToDepositorToTimelock[userAddress][timelockManagerAddress];\\n        require(block.timestamp > timelock.releaseStart, ERROR_UNAUTHORIZED);\\n        require(timelock.remainingAmount > 0, ERROR_UNAUTHORIZED);\\n        uint256 totalUnlocked;\\n        if (block.timestamp >= timelock.releaseEnd)\\n        {\\n            totalUnlocked = timelock.totalAmount;\\n        }\\n        else\\n        {\\n            uint256 passedTime = block.timestamp - timelock.releaseStart;\\n            uint256 totalTime = timelock.releaseEnd - timelock.releaseStart;\\n            totalUnlocked = timelock.totalAmount * passedTime / totalTime;\\n        }\\n        uint256 previouslyUnlocked = timelock.totalAmount - timelock.remainingAmount;\\n        uint256 newlyUnlocked = totalUnlocked - previouslyUnlocked;\\n        User storage user = users[userAddress];\\n        user.vesting = user.vesting - newlyUnlocked;\\n        uint256 newRemainingAmount = timelock.remainingAmount - newlyUnlocked;\\n        userToDepositorToTimelock[userAddress][timelockManagerAddress].remainingAmount = newRemainingAmount;\\n        emit UpdatedTimelock(\\n            userAddress,\\n            timelockManagerAddress,\\n            newRemainingAmount\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x979ae9d1a98ead1947c6fc9c56418b3ee2fb1ad927c0c09d150ee7bc8fe8d540\",\"license\":\"MIT\"},\"contracts/TransferUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./DelegationUtils.sol\\\";\\nimport \\\"./interfaces/ITransferUtils.sol\\\";\\n\\n/// @title Contract that implements token transfer functionality\\ncontract TransferUtils is DelegationUtils, ITransferUtils {\\n    /// @param api3TokenAddress API3 token contract address\\n    constructor(address api3TokenAddress)\\n        DelegationUtils(api3TokenAddress)\\n    {}\\n\\n    /// @notice Called to deposit tokens for a user by using `transferFrom()`\\n    /// @dev This method is used by `TimelockManager.sol`\\n    /// @param source Token transfer source\\n    /// @param amount Amount to be deposited\\n    /// @param userAddress User that the tokens will be deposited for\\n    function deposit(\\n        address source,\\n        uint256 amount,\\n        address userAddress\\n        )\\n        public\\n        override\\n    {\\n        payReward();\\n        users[userAddress].unstaked = users[userAddress].unstaked + amount;\\n        api3Token.transferFrom(source, address(this), amount);\\n        emit Deposited(\\n            userAddress,\\n            amount\\n            );\\n    }\\n\\n    /// @notice Called to withdraw tokens\\n    /// @dev The user should call `getUserLocked()` beforehand to ensure that\\n    /// they have at least `amount` unlocked tokens to withdraw\\n    /// @param destination Token transfer destination\\n    /// @param amount Amount to be withdrawn\\n    function withdraw(\\n        address destination,\\n        uint256 amount\\n        )\\n        public\\n        override\\n    {\\n        payReward();\\n        User storage user = users[msg.sender];\\n        uint256 userLocked = getUserLocked(msg.sender);\\n        // Check if the user has `amount` unlocked tokens to withdraw\\n        uint256 lockedAndVesting = userLocked + user.vesting;\\n        uint256 userTotalFunds = user.unstaked + userStake(msg.sender);\\n        require(userTotalFunds >= lockedAndVesting + amount, ERROR_VALUE);\\n        // Carry on with the withdrawal\\n        require(user.unstaked >= amount, ERROR_VALUE);\\n        user.unstaked = user.unstaked - amount;\\n        api3Token.transfer(destination, amount);\\n        emit Withdrawn(msg.sender,\\n            destination,\\n            amount\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x496329d7c01e1f4d7891537488a09e759b3d85c13fa6ddcec635416b0d1179d3\",\"license\":\"MIT\"},\"contracts/auxiliary/interfaces/v0.8.2/IApi3Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IApi3Token is IERC20 {\\n    event MinterStatusUpdated(\\n        address indexed minterAddress,\\n        bool minterStatus\\n        );\\n\\n    event BurnerStatusUpdated(\\n        address indexed burnerAddress,\\n        bool burnerStatus\\n        );\\n\\n    function updateMinterStatus(\\n        address minterAddress,\\n        bool minterStatus\\n        )\\n        external;\\n\\n    function updateBurnerStatus(bool burnerStatus)\\n        external;\\n\\n    function mint(\\n        address account,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function burn(uint256 amount)\\n        external;\\n\\n    function getMinterStatus(address minterAddress)\\n        external\\n        view\\n        returns(bool minterStatus);\\n\\n    function getBurnerStatus(address burnerAddress)\\n        external\\n        view\\n        returns(bool burnerStatus);\\n}\\n\",\"keccak256\":\"0x2e5558b088ed8f2383b67236454b927fd830f99deab648515c01b782ae461d56\",\"license\":\"MIT\"},\"contracts/auxiliary/interfaces/v0.8.2/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x33be635818641c4a06262a44b4e6579c17e0534ef539f48350cf2e3c3cc7e6e2\",\"license\":\"MIT\"},\"contracts/interfaces/IApi3Pool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./ITimelockUtils.sol\\\";\\n\\ninterface IApi3Pool is ITimelockUtils {\\n}\\n\",\"keccak256\":\"0x0748e75253d0d4b70e24ce39f8792639672bd509ddfd06227a6086d9980ecd75\",\"license\":\"MIT\"},\"contracts/interfaces/IClaimUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./IStakeUtils.sol\\\";\\n\\ninterface IClaimUtils is IStakeUtils {\\n    event PaidOutClaim(\\n        address indexed recipient,\\n        uint256 amount\\n        );\\n\\n    function payOutClaim(\\n        address recipient,\\n        uint256 amount\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0x33cf02014b7a57fbd3044129b8ffec263848a4a9c620fa22d05230104c4498a7\",\"license\":\"MIT\"},\"contracts/interfaces/IDelegationUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./IRewardUtils.sol\\\";\\n\\ninterface IDelegationUtils is IRewardUtils {\\n    event Delegated(\\n        address indexed user,\\n        address indexed delegate\\n        );\\n\\n    event Undelegated(\\n        address indexed user,\\n        address indexed delegate\\n        );\\n\\n    function delegateVotingPower(address delegate) \\n        external;\\n\\n    function undelegateVotingPower()\\n        external;\\n\\n    \\n}\\n\",\"keccak256\":\"0xd0bc1ca004579ade82115b35517636231722b5701c1d725efc555f5c060bd9ae\",\"license\":\"MIT\"},\"contracts/interfaces/IGetterUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./IStateUtils.sol\\\";\\n\\ninterface IGetterUtils is IStateUtils {\\n    function balanceOfAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns(uint256);\\n\\n    function balanceOf(address userAddress)\\n        external\\n        view\\n        returns(uint256);\\n\\n    function totalSupplyOneBlockAgo()\\n        external\\n        view\\n        returns(uint256);\\n\\n    function totalSupply()\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userSharesAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userShares(address userAddress)\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userSharesAtWithBinarySearch(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userStake(address userAddress)\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userReceivedDelegationAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userReceivedDelegation(address userAddress)\\n        external\\n        view\\n        returns(uint256);\\n\\n    function userDelegateAt(\\n        address userAddress,\\n        uint256 _block\\n        )\\n        external\\n        view\\n        returns(address);\\n\\n    function userDelegate(address userAddress)\\n        external\\n        view\\n        returns(address);\\n\\n    function getUserLocked(address userAddress)\\n        external\\n        view\\n        returns(uint256);\\n}\\n\",\"keccak256\":\"0x4da103ad5d41e01d9ca455f0b76e5d6fd6e1252b673a0af0ee080a4f83a3869b\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./IGetterUtils.sol\\\";\\n\\ninterface IRewardUtils is IGetterUtils {\\n    event PaidReward(\\n        uint256 indexed epoch,\\n        uint256 rewardAmount,\\n        uint256 apr\\n        );\\n\\n    function payReward()\\n        external;\\n}\\n\",\"keccak256\":\"0x29409a7ef40e6985b65ed48e0b025a52a8d2ec2e8f3f38d6dcaa3eeaf036e664\",\"license\":\"MIT\"},\"contracts/interfaces/IStakeUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./ITransferUtils.sol\\\";\\n\\ninterface IStakeUtils is ITransferUtils{\\n    event Staked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 totalShares\\n        );\\n\\n    event ScheduledUnstake(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 scheduledFor\\n        );\\n\\n    event Unstaked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 totalShares\\n        );\\n\\n    function stake(uint256 amount)\\n        external;\\n\\n    function depositAndStake(\\n        address source,\\n        uint256 amount,\\n        address userAddress\\n        )\\n        external;\\n\\n    function scheduleUnstake(uint256 amount)\\n        external;\\n\\n    function unstake()\\n        external\\n        returns(uint256);\\n\\n    function unstakeAndWithdraw(address destination)\\n        external;\\n}\\n\",\"keccak256\":\"0xc0eb39b7295d42ab4efc0f6a70a95203c6273c225814e037e74e34e16e2a6c58\",\"license\":\"MIT\"},\"contracts/interfaces/IStateUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IStateUtils {\\n    event SetDaoApps(\\n        address agentAppPrimary,\\n        address agentAppSecondary,\\n        address votingAppPrimary,\\n        address votingAppSecondary\\n        );\\n\\n    event SetClaimsManagerStatus(\\n        address claimsManager,\\n        bool status\\n        );\\n\\n    event SetStakeTarget(\\n        uint256 oldTarget,\\n        uint256 newTarget\\n        );\\n\\n    event SetMaxApr(\\n        uint256 oldMaxApr,\\n        uint256 maxApr\\n        );\\n\\n    event SetMinApr(\\n        uint256 oldMinApr,\\n        uint256 minApr\\n        );\\n\\n    event SetUnstakeWaitPeriod(\\n        uint256 oldUnstakeWaitPeriod,\\n        uint256 unstakeWaitPeriod\\n        );\\n\\n    event SetAprUpdateCoefficient(\\n        uint256 oldAprUpdateCoefficient,\\n        uint256 aprUpdateCoefficient\\n        );\\n\\n    event SetProposalVotingPowerThreshold(\\n        uint256 oldProposalVotingPowerThreshold,\\n        uint256 proposalVotingPowerThreshold\\n        );\\n\\n    event PublishedSpecsUrl(\\n        address indexed votingApp,\\n        uint256 indexed proposalIndex,\\n        address userAddress,\\n        string specsUrl\\n        );\\n\\n    event UpdatedLastVoteSnapshotBlock(\\n        address votingApp,\\n        uint256 lastVoteSnapshotBlock,\\n        uint256 lastVoteSnapshotBlockUpdateTimestamp\\n        );\\n\\n    function setDaoApps(\\n        address _agentAppPrimary,\\n        address _agentAppSecondary,\\n        address _votingAppPrimary,\\n        address _votingAppSecondary\\n        )\\n        external;\\n\\n    function setClaimsManagerStatus(\\n        address claimsManager,\\n        bool status\\n        )\\n        external;\\n\\n    function setStakeTarget(uint256 _stakeTarget)\\n        external;\\n\\n    function setMaxApr(uint256 _maxApr)\\n        external;\\n\\n    function setMinApr(uint256 _minApr)\\n        external;\\n\\n    function setUnstakeWaitPeriod(uint256 _unstakeWaitPeriod)\\n        external;\\n\\n    function setAprUpdateCoefficient(uint256 _aprUpdateCoefficient)\\n        external;\\n\\n    function setProposalVotingPowerThreshold(uint256 _proposalVotingPowerThreshold)\\n        external;\\n\\n    function publishSpecsUrl(\\n        address votingApp,\\n        uint256 proposalIndex,\\n        string calldata specsUrl\\n        )\\n        external;\\n\\n    function updateLastVoteSnapshotBlock(uint256 snapshotBlock)\\n        external;\\n}\\n\",\"keccak256\":\"0xda88ad2741e890d2494e2e20a90b1d53fcb3f585367f75c23e8ff8df4dda1181\",\"license\":\"MIT\"},\"contracts/interfaces/ITimelockUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./IClaimUtils.sol\\\";\\n\\ninterface ITimelockUtils is IClaimUtils {\\n    event DepositedVesting(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 start,\\n        uint256 end\\n        );\\n\\n    event UpdatedTimelock(\\n        address indexed user,\\n        address indexed timelockManagerAddress,\\n        uint256 remainingAmount\\n        );\\n\\n    function depositWithVesting(\\n        address source,\\n        uint256 amount,\\n        address userAddress,\\n        uint256 releaseStart,\\n        uint256 releaseEnd\\n        )\\n        external;\\n\\n    function updateTimelockStatus(\\n        address userAddress,\\n        address timelockManagerAddress\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0xadecc7ff19016a6ead96fbd839147e634e2ef39c678f465da3603b6e828a3d1f\",\"license\":\"MIT\"},\"contracts/interfaces/ITransferUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./IDelegationUtils.sol\\\";\\n\\ninterface ITransferUtils is IDelegationUtils{\\n    event Deposited(\\n        address indexed user,\\n        uint256 amount\\n        );\\n\\n    event Withdrawn(\\n        address indexed user,\\n        address indexed destination,\\n        uint256 amount\\n        );\\n\\n    function deposit(\\n        address source,\\n        uint256 amount,\\n        address userAddress\\n        )\\n        external;\\n\\n    function withdraw(\\n        address destination,\\n        uint256 amount\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0x3b01588bde973469541dd5ca88bf61423c0f0d18ad3cf322e73ba503a6060a4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Functionalities of the contract are distributed to files that form a chain of inheritance: (1) Api3Pool.sol (2) TimelockUtils.sol (3) ClaimUtils.sol (4) StakeUtils.sol (5) TransferUtils.sol (6) DelegationUtils.sol (7) RewardUtils.sol (8) GetterUtils.sol (9) StateUtils.sol",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "This method is used to implement the MiniMe interface for the Api3Voting app",
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Current voting power of the user"
        }
      },
      "balanceOfAt(address,uint256)": {
        "details": "This method is used to implement the MiniMe interface for the Api3Voting app",
        "params": {
          "_block": "Block number for which the query is being made for",
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Voting power of the user at the block"
        }
      },
      "constructor": {
        "params": {
          "api3TokenAddress": "API3 token contract address"
        }
      },
      "delegateVotingPower(address)": {
        "params": {
          "delegate": "User address the voting power will be delegated to"
        }
      },
      "deposit(address,uint256,address)": {
        "details": "This method is used by `TimelockManager.sol`",
        "params": {
          "amount": "Amount to be deposited",
          "source": "Token transfer source",
          "userAddress": "User that the tokens will be deposited for"
        }
      },
      "depositAndStake(address,uint256,address)": {
        "details": "Due to the `deposit()` interface, `userAddress` can only be the caller",
        "params": {
          "amount": "Amount to be deposited and staked",
          "source": "Token transfer source",
          "userAddress": "User that the tokens will be staked for"
        }
      },
      "depositWithVesting(address,uint256,address,uint256,uint256)": {
        "details": "Refer to `TimelockManager.sol` to see how this is used",
        "params": {
          "amount": "Token amount",
          "releaseEnd": "Vesting schedule ending time",
          "releaseStart": "Vesting schedule starting time",
          "source": "Token source",
          "userAddress": "Address of the user who will receive the tokens"
        }
      },
      "getUserLocked(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "locked": "Current locked tokens of the user"
        }
      },
      "payOutClaim(address,uint256)": {
        "details": "The claims manager is a trusted contract that is allowed to withdraw as many tokens as it wants from the pool to pay out insurance claims. Any kind of limiting logic (e.g., maximum amount of tokens that can be withdrawn) is implemented at its end and is out of the scope of this contract. This will revert if the pool does not have enough funds.",
        "params": {
          "amount": "Amount of tokens that will be paid out",
          "recipient": "Recipient of the claim"
        }
      },
      "payReward()": {
        "details": "Skips past epochs for which rewards have not been paid for. Skips the reward payment if the pool is not authorized to mint tokens. Neither of these conditions will occur in practice."
      },
      "publishSpecsUrl(address,uint256,string)": {
        "details": "Since the owner of a proposal is known, users publishing specs for a proposal that is not their own is not a concern",
        "params": {
          "proposalIndex": "Proposal index",
          "specsUrl": "URL that hosts the specs of the transaction that will be made if the proposal passes"
        }
      },
      "scheduleUnstake(uint256)": {
        "details": "Users need to schedule an unstake and wait for `unstakeWaitPeriod` to be able to unstake.",
        "params": {
          "amount": "Amount of tokens for which the unstake will be scheduled for "
        }
      },
      "setAprUpdateCoefficient(uint256)": {
        "params": {
          "_aprUpdateCoefficient": "APR update coefficient"
        }
      },
      "setClaimsManagerStatus(address,bool)": {
        "details": "The claims manager is a trusted contract that is allowed to withdraw as many tokens as it wants from the pool to pay out insurance claims. Only the primary Agent can do this because it is a critical operation.",
        "params": {
          "claimsManager": "Claims manager contract address",
          "status": "Authorization status"
        }
      },
      "setDaoApps(address,address,address,address)": {
        "details": "This can also be called later on by the primary Agent to update all app addresses as a means of upgrade",
        "params": {
          "_agentAppPrimary": "Address of the primary Agent",
          "_agentAppSecondary": "Address of the secondary Agent",
          "_votingAppPrimary": "Address of the primary Api3Voting",
          "_votingAppSecondary": "Address of the secondary Api3Voting"
        }
      },
      "setMaxApr(uint256)": {
        "params": {
          "_maxApr": "Maximum APR"
        }
      },
      "setMinApr(uint256)": {
        "params": {
          "_minApr": "Minimum APR"
        }
      },
      "setProposalVotingPowerThreshold(uint256)": {
        "params": {
          "_proposalVotingPowerThreshold": "Voting power threshold for proposals"
        }
      },
      "setStakeTarget(uint256)": {
        "params": {
          "_stakeTarget": "Stake target"
        }
      },
      "setUnstakeWaitPeriod(uint256)": {
        "details": "This may want to be increased to provide more time for insurance claims to be resolved. Even when the insurance functionality is not implemented, the minimum valid value is `EPOCH_LENGTH` to prevent users from unstaking, withdrawing and staking with another address to work around the proposal spam protection. Only the primary Agent can do this because it is a critical operation.",
        "params": {
          "_unstakeWaitPeriod": "Unstake waiting period"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "Amount of tokens to stake"
        }
      },
      "totalSupply()": {
        "details": "This method is used to implement the MiniMe interface for the Aragon Voting app",
        "returns": {
          "_0": "Current total voting power"
        }
      },
      "totalSupplyOneBlockAgo()": {
        "details": "This method is used to implement the MiniMe interface for the Api3Voting app",
        "returns": {
          "_0": "Total voting power one block ago"
        }
      },
      "unstake()": {
        "returns": {
          "_0": "Amount of tokens that are unstaked"
        }
      },
      "unstakeAndWithdraw(address)": {
        "details": "Note that withdraw may revert because the user may have less than `unstaked` tokens that are withdrawable",
        "params": {
          "destination": "Token transfer destination"
        }
      },
      "updateLastVoteSnapshotBlock(uint256)": {
        "params": {
          "snapshotBlock": "Last vote snapshot block number"
        }
      },
      "updateTimelockStatus(address,address)": {
        "params": {
          "timelockManagerAddress": "Address of the TimelockManager that has created the timelock",
          "userAddress": "Address of the user whose timelock status will be updated"
        }
      },
      "userDelegate(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Current delegate of the user"
        }
      },
      "userDelegateAt(address,uint256)": {
        "details": "Starts from the most recent value in `user.delegates` and searches backwards one element at a time. If `_block` is within `EPOCH_LENGTH`, this call is guaranteed to find the value among the last 2 elements because a user cannot update delegate more frequently than once an `EPOCH_LENGTH`.",
        "params": {
          "_block": "Block number",
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Delegate of the user at the specific block"
        }
      },
      "userReceivedDelegation(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Current voting power delegated to the user"
        }
      },
      "userReceivedDelegationAt(address,uint256)": {
        "details": "Starts from the most recent value in `user.delegatedTo` and searches backwards one element at a time. If `_block` is within `EPOCH_LENGTH`, this call is guaranteed to find the value among the last `MAX_INTERACTION_FREQUENCY` elements, which is why it only searches through them. ",
        "params": {
          "_block": "Block number for which the query is being made for",
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Voting power delegated to the user at the block"
        }
      },
      "userShares(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Current pool shares of the user"
        }
      },
      "userSharesAt(address,uint256)": {
        "details": "Starts from the most recent value in `user.shares` and searches backwards one element at a time",
        "params": {
          "_block": "Block number for which the query is being made for",
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Pool shares of the user at the block"
        }
      },
      "userSharesAtWithBinarySearch(address,uint256)": {
        "details": "From  https://github.com/aragon/minime/blob/1d5251fc88eee5024ff318d95bc9f4c5de130430/contracts/MiniMeToken.sol#L431 This method is not used by the current iteration of the DAO/pool and is implemented for future external contracts to use to get the user shares at an arbitrary block.",
        "params": {
          "_block": "Block number for which the query is being made for",
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Pool shares of the user at the block"
        }
      },
      "userStake(address)": {
        "params": {
          "userAddress": "User address"
        },
        "returns": {
          "_0": "Current staked tokens of the user"
        }
      },
      "withdraw(address,uint256)": {
        "details": "The user should call `getUserLocked()` beforehand to ensure that they have at least `amount` unlocked tokens to withdraw",
        "params": {
          "amount": "Amount to be withdrawn",
          "destination": "Token transfer destination"
        }
      }
    },
    "title": "API3 pool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "EPOCH_LENGTH()": {
        "notice": "Length of the epoch in which the staking reward is paid out once. It is hardcoded as 7 days in seconds."
      },
      "MAX_INTERACTION_FREQUENCY()": {
        "notice": "Maximum number of additions interactions can make to a specific user's `delegatedTo` and `delegates` in an EPOCH_LENGTH before it starts to revert"
      },
      "REWARD_VESTING_PERIOD()": {
        "notice": "Number of epochs before the staking rewards get unlocked. Hardcoded as 52 epochs, which corresponds to a year."
      },
      "agentAppPrimary()": {
        "notice": "Address of the primary Agent app of the API3 DAO"
      },
      "agentAppSecondary()": {
        "notice": "Address of the secondary Agent app of the API3 DAO"
      },
      "api3Token()": {
        "notice": "API3 token contract"
      },
      "aprUpdateCoefficient()": {
        "notice": "Coefficient that represents how aggresively the APR will be updated to meet the stake target."
      },
      "balanceOf(address)": {
        "notice": "Called to get the current voting power of a user"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "Called to get the voting power of a user at a specific block"
      },
      "claimsManagerStatus(address)": {
        "notice": "Mapping that keeps the claims manager statuses of addresses"
      },
      "currentApr()": {
        "notice": "APR that will be paid next epoch"
      },
      "delegateVotingPower(address)": {
        "notice": "Called by the user to delegate voting power"
      },
      "deposit(address,uint256,address)": {
        "notice": "Called to deposit tokens for a user by using `transferFrom()`"
      },
      "depositAndStake(address,uint256,address)": {
        "notice": "Convenience method to deposit and stake in a single transaction"
      },
      "depositWithVesting(address,uint256,address,uint256,uint256)": {
        "notice": "Called by TimelockManager contracts to deposit tokens on behalf of a user on a linear vesting schedule"
      },
      "epochIndexOfLastRewardPayment()": {
        "notice": "Epoch index of the most recent reward payment"
      },
      "epochIndexToReward(uint256)": {
        "notice": "Records of rewards paid in each epoch"
      },
      "genesisEpoch()": {
        "notice": "Epochs are indexed as `block.timestamp / EPOCH_LENGTH`. `genesisEpoch` is the index of the epoch in which the pool is deployed."
      },
      "getUserLocked(address)": {
        "notice": "Called to get the current locked tokens of the user"
      },
      "maxApr()": {
        "notice": "Maximum APR (annual percentage rate) the pool will pay as staking rewards in percentages"
      },
      "minApr()": {
        "notice": "Minimum APR (annual percentage rate) the pool will pay as staking rewards in percentages"
      },
      "payOutClaim(address,uint256)": {
        "notice": "Called by a claims manager to pay out an insurance claim"
      },
      "payReward()": {
        "notice": "Called to pay the reward for the current epoch"
      },
      "proposalVotingPowerThreshold()": {
        "notice": "Minimum voting power the users must have to be able to make proposals (in percentages)"
      },
      "publishSpecsUrl(address,uint256,string)": {
        "notice": "Called by the owner of the proposal to publish the specs URL"
      },
      "scheduleUnstake(uint256)": {
        "notice": "Called to schedule an unstake by the user"
      },
      "setAprUpdateCoefficient(uint256)": {
        "notice": "Called by the DAO Agent to set the APR update coefficient"
      },
      "setClaimsManagerStatus(address,bool)": {
        "notice": "Called by the DAO Agent to set the authorization status of a claims manager contract"
      },
      "setDaoApps(address,address,address,address)": {
        "notice": "Called after deployment to set the addresses of the DAO apps"
      },
      "setMaxApr(uint256)": {
        "notice": "Called by the DAO Agent to set the maximum APR"
      },
      "setMinApr(uint256)": {
        "notice": "Called by the DAO Agent to set the minimum APR"
      },
      "setProposalVotingPowerThreshold(uint256)": {
        "notice": "Called by the DAO Agent to set the voting power threshold for proposals Only the primary Agent can do this because it is a critical operation."
      },
      "setStakeTarget(uint256)": {
        "notice": "Called by the DAO Agent to set the stake target"
      },
      "setUnstakeWaitPeriod(uint256)": {
        "notice": "Called by the DAO Agent to set the unstake waiting period"
      },
      "stake(uint256)": {
        "notice": "Called to stake tokens to receive pools in the share"
      },
      "stakeTarget()": {
        "notice": "Stake target the pool will aim to meet in percentages of the total token supply. The staking rewards increase if the total staked  amount is below this, and vice versa."
      },
      "totalStake()": {
        "notice": "Total number of tokens staked at the pool"
      },
      "totalSupply()": {
        "notice": "Called to get the current total voting power"
      },
      "totalSupplyOneBlockAgo()": {
        "notice": "Called to get the total voting power one block ago"
      },
      "undelegateVotingPower()": {
        "notice": "Called by the user to undelegate voting power"
      },
      "unstake()": {
        "notice": "Called to execute a pre-scheduled unstake"
      },
      "unstakeAndWithdraw(address)": {
        "notice": "Convenience method to execute an unstake and withdraw in a single transaction"
      },
      "unstakeWaitPeriod()": {
        "notice": "Users need to schedule an unstake and wait for `unstakeWaitPeriod` before being able to unstake. This is to prevent the stakers from frontrunning insurance claims by unstaking to evade them, or repeatedly unstake/stake to work around the proposal spam protection."
      },
      "updateLastVoteSnapshotBlock(uint256)": {
        "notice": "Called by a DAO Api3Voting app to update the last vote snapshot block number"
      },
      "updateTimelockStatus(address,address)": {
        "notice": "Called to release tokens vested by the timelock"
      },
      "userAddressToVotingAppToProposalIndexToSpecsUrl(address,address,uint256)": {
        "notice": "Mapping that keeps the specs of a proposal provided by a user"
      },
      "userDelegate(address)": {
        "notice": "Called to get the current delegate of the user"
      },
      "userDelegateAt(address,uint256)": {
        "notice": "Called to get the delegate of the user at a specific block"
      },
      "userReceivedDelegation(address)": {
        "notice": "Called to get the current voting power delegated to a user"
      },
      "userReceivedDelegationAt(address,uint256)": {
        "notice": "Called to get the voting power delegated to a user at a specific block"
      },
      "userShares(address)": {
        "notice": "Called to get the current pool shares of a user"
      },
      "userSharesAt(address,uint256)": {
        "notice": "Called to get the pool shares of a user at a specific block"
      },
      "userSharesAtWithBinarySearch(address,uint256)": {
        "notice": "Called to get the pool shares of a user at a specific block using binary search"
      },
      "userStake(address)": {
        "notice": "Called to get the current staked tokens of the user"
      },
      "userToDepositorToTimelock(address,address)": {
        "notice": "Maps user addresses to TimelockManager contract addresses to  timelocks"
      },
      "users(address)": {
        "notice": "User records"
      },
      "votingAppPrimary()": {
        "notice": "Address of the primary Api3Voting app of the API3 DAO"
      },
      "votingAppSecondary()": {
        "notice": "Address of the secondary Api3Voting app of the API3 DAO"
      },
      "withdraw(address,uint256)": {
        "notice": "Called to withdraw tokens"
      }
    },
    "notice": "Users can stake API3 tokens at the pool contract to be granted shares. These shares are exposed to the Aragon-based DAO with a MiniMe token interface, giving the user voting power at the DAO. Staking pays out weekly rewards that get unlocked after a year, and staked funds are used to collateralize an insurance product that is outside the scope of this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1653,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "api3Token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IApi3Token)2911"
      },
      {
        "astId": 1656,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "agentAppPrimary",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1659,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "agentAppSecondary",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1662,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "votingAppPrimary",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1665,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "votingAppSecondary",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1670,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "claimsManagerStatus",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1679,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "epochIndexToReward",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Reward)1587_storage)"
      },
      {
        "astId": 1682,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "epochIndexOfLastRewardPayment",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1688,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "users",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(User)1610_storage)"
      },
      {
        "astId": 1691,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "totalStake",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1695,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "stakeTarget",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1699,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "minApr",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1703,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "maxApr",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1707,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "aprUpdateCoefficient",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1711,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "unstakeWaitPeriod",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1715,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "proposalVotingPowerThreshold",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1719,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "currentApr",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1728,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "userAddressToVotingAppToProposalIndexToSpecsUrl",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_string_storage)))"
      },
      {
        "astId": 1730,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "lastVoteSnapshotBlock",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 1734,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "snapshotBlockToTimestamp",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1737,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "totalSharesCheckpoint1",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(Checkpoint)1575_storage"
      },
      {
        "astId": 1740,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "totalSharesCheckpoint2",
        "offset": 0,
        "slot": "22",
        "type": "t_struct(Checkpoint)1575_storage"
      },
      {
        "astId": 2471,
        "contract": "contracts/Api3Pool.sol:Api3Pool",
        "label": "userToDepositorToTimelock",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Timelock)2463_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AddressCheckpoint)1580_storage)dyn_storage": {
        "base": "t_struct(AddressCheckpoint)1580_storage",
        "encoding": "dynamic_array",
        "label": "struct StateUtils.AddressCheckpoint[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Checkpoint)1575_storage)dyn_storage": {
        "base": "t_struct(Checkpoint)1575_storage",
        "encoding": "dynamic_array",
        "label": "struct StateUtils.Checkpoint[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IApi3Token)2911": {
        "encoding": "inplace",
        "label": "contract IApi3Token",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_string_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => string)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_string_storage))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Timelock)2463_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct TimelockUtils.Timelock))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Timelock)2463_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_string_storage)"
      },
      "t_mapping(t_address,t_struct(Timelock)2463_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TimelockUtils.Timelock)",
        "numberOfBytes": "32",
        "value": "t_struct(Timelock)2463_storage"
      },
      "t_mapping(t_address,t_struct(User)1610_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StateUtils.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)1610_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Reward)1587_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StateUtils.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)1587_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressCheckpoint)1580_storage": {
        "encoding": "inplace",
        "label": "struct StateUtils.AddressCheckpoint",
        "members": [
          {
            "astId": 1577,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1579,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "_address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Checkpoint)1575_storage": {
        "encoding": "inplace",
        "label": "struct StateUtils.Checkpoint",
        "members": [
          {
            "astId": 1572,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1574,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Reward)1587_storage": {
        "encoding": "inplace",
        "label": "struct StateUtils.Reward",
        "members": [
          {
            "astId": 1582,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "atBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1584,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1586,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "totalSharesThen",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Timelock)2463_storage": {
        "encoding": "inplace",
        "label": "struct TimelockUtils.Timelock",
        "members": [
          {
            "astId": 2456,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2458,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "remainingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2460,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "releaseStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2462,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "releaseEnd",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(User)1610_storage": {
        "encoding": "inplace",
        "label": "struct StateUtils.User",
        "members": [
          {
            "astId": 1589,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "unstaked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1591,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "vesting",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1595,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "shares",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Checkpoint)1575_storage)dyn_storage"
          },
          {
            "astId": 1599,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "delegates",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(AddressCheckpoint)1580_storage)dyn_storage"
          },
          {
            "astId": 1603,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "delegatedTo",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(Checkpoint)1575_storage)dyn_storage"
          },
          {
            "astId": 1605,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "lastDelegationUpdateTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1607,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "unstakeScheduledFor",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1609,
            "contract": "contracts/Api3Pool.sol:Api3Pool",
            "label": "unstakeAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}